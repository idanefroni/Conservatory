#!/usr/bin/perl
use POSIX;
use strict;
use Getopt::Long;
use Cwd 'abs_path';
use List::MoreUtils qw(firstidx);

###########

my $conservatoryDir=abs_path(".");
my $tmpDir;
my $genome="";
my $family;
my $force=0;
my $verbose=0;
my $donotFilter,
my $help=0;
my $genomeWasProcessed=0;
my $threads=16;
my @threadPids;

my $skipConservation=0;
my $justFamilyAlignment=0;
my $minIdentity=0;
my $minSpeciesNum= -1;
my $minPhyloPscore=0;
my $skipMissingGenomes=0;
my $referenceGenome="";
my $geneListFileName;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"reference=s" => \$referenceGenome,
			"threads=i" => \$threads,
			"genelist=s" => \$geneListFileName,
			"skip-missing-genomes" => \$skipMissingGenomes,
			"min-identity=i" => \$minIdentity,
			"min-species=i" => \$minSpeciesNum,
			"min-phylop-score=f" => \$minPhyloPscore,
			"skip-conservation" => \$skipConservation,
			"do-not-filter" =>\$donotFilter,
			"just-family-alignment" => \$justFamilyAlignment,
			"tmp-dir=s" => \$tmpDir,			
			"force" => \$force,
			"verbose" => \$verbose,
			"help" => \$help) or die("Error in command line arguments\n");

			
if($help || $referenceGenome eq "") {
	print "Conservatory version 2.0.1\n\n";
	
	print "processConservation --family <family>\n\n";
	print "\t--conservatoryDirectory\tPath of the main conservatory directory. See README for directory structure. (DEFAULT: current directory)\n";
	print "\t--reference\t\tThe reference genome (REQUIRED).\n";
	print "\t--genelist\t\tThe list of genes to process (DEFAULT: all genes in the reference genome).\n";
	print "\t--min-identity\t\tMinimum identity for LASTZ alignments.\n";
	print "\t--min-species\t\tMinimum number of species share sequence for an alignment to be considered for CNS.\n";
	print "\t--min-phylop-score\t\tMinimum phyloP score to consider as significant CNS.\n";
	print "\t--skip-missing-genomes\t\tSkip genomes with incomplete data and continue analysis (DEFAULT: terminate with error message).\n";
	print "\t--skip-conservation\t\tSkip conservation calculation step (just merge existing files).\n";
	print "\t--just-family-alignment\t\tPerform just the alignment step (no CNS or deep CNS calculations).\n";
    print "\t--tmp-dir\t\tSpecify the temporary directory (DEFAULT is alignments/<referenceName>/tmp).\n"; 	
	print "\t--force\t\tForce rebuilding alignments.\n";
	print "\t--threads\t\tNumber of threads to use.\n";
	print "\t--verbose\t\tOutput extra progress messages.\n";
	print "\t--help\t\t\tPrints this message.\n\n";
	exit(0);
}

#################### Set up files
my $genomedb_file = "$conservatoryDir/genome_database.csv";
my $outputDir = "$conservatoryDir/alignments/$referenceGenome";

my $conservationDir = "$conservatoryDir/CNS";
my $alignmentDir = "$conservatoryDir/alignments";
my $genomesDir = "$conservatoryDir/genomes";


#### set up parallel processing
@threadPids = (0) x $threads;

####### First, sanity checks. Check to see if blast is installed and if directory structure is OK.
####### 
die "ERROR: Cannot find file genome database file ($genomedb_file)\n" unless -e $genomedb_file;
die "ERROR: Conservatory directory structure at ($conservatoryDir) is corrupt\n" unless (-e "$conservatoryDir/genomes" && -e "$conservatoryDir/genomes/blastdb/" && -e "$conservatoryDir/scripts" && -e "$conservatoryDir/alignments");

my $t_lastz = `sh -c 'command -v lastz'`;
die "ERROR: Cannot find lastz in path. Please make sure it is installed.\n" unless ($t_lastz ne ""); 

my $t_samtools = `sh -c 'command -v samtools'`;
die "ERROR: Cannot find samtools in path. Please make sure it is installed.\n" unless ($t_samtools ne "");  

my $t_phyloP = `sh -c 'command -v phyloP'`;
die "ERROR: Cannot find phyloP in path. Please make sure phast is installed.\n" unless ($t_phyloP ne "");  

######## Read genome database file.
	
open(my $genomedb, "<", $genomedb_file);
my $header=<$genomedb>;
while(my $curgenomeline= <$genomedb>) {
	my ($curgenomeName, $curgenomeSpecies,  $curgenomeFamily, $curgenomeReference) = split /,/, $curgenomeline;

	if( $curgenomeName eq $referenceGenome ) {
		$genomeWasProcessed=1;
		
		#### First, genome sanity check. See that we have all files.
		print localtime() . ": START processing conservation for  reference genome $referenceGenome\n";
		
		if($geneListFileName eq "") {
			$geneListFileName = "$conservatoryDir/genomes/$curgenomeFamily/$curgenomeName.footprint.gff3";
		}
		die localtime() . ": ABORT Cannot find gene list file name ($geneListFileName).\n" unless -e $geneListFileName;
		
		### Start threads
		if(!($skipConservation)) {
			
			open(my $geneListFile, "<", $geneListFileName);
			while(my $geneline = <$geneListFile>) {
					chomp($geneline);
					my $curLocus;
					my @array = split /\t/, $geneline;
					my %geneparam = split/[;=]/, $array[8];
					($curLocus) = $geneparam{'Name'};
					
					## Get genename
					$curLocus =~ s/^.[^-]*-[^-]*-//;
					
					# now find a place for the thread
					
					my $placeForProcess = firstidx { $_ == 0 } @threadPids;
					### If the queue is full, wait for the next spot 
					if( $placeForProcess == -1 ) {
						my $freedPid = wait();
						$placeForProcess = firstidx { $_ == $freedPid } @threadPids;
					}
					#### now fork the alignment
					my $forkChildPid = fork();
					if(!$forkChildPid) {	#### In the child process
						print localtime() . ": Thread $placeForProcess is processing $curLocus.\n";
						my $alignmentParams;
						
						$alignmentParams = "--reference $referenceGenome --locus $curLocus --skip-kaks";

						if($minIdentity>0) { $alignmentParams .= " --min-identity $minIdentity"; }
						if($minSpeciesNum>=0) { $alignmentParams .= " --min-species $minSpeciesNum"; }
						if($minPhyloPscore>0) { $alignmentParams .= " --min-phylop-score $minPhyloPscore"; }   		
						if($force) { $alignmentParams .= " --force"; }
						if($skipMissingGenomes) { $alignmentParams .= " --skip-missing-genomes"; }
						if($justFamilyAlignment) { $alignmentParams .= " --just-family-alignment"; }
						if($tmpDir ne "") { $alignmentParams .= " --tmp-dir $tmpDir"; }
						system("perl $conservatoryDir/scripts/buildConservation $alignmentParams");
						exit;
					} else {
						$threadPids[$placeForProcess] = $forkChildPid;
					}
			}
			## wait for all child processes to finish
			for my $curPid (@threadPids) {
				if($curPid != 0) { waitpid($curPid, 0); }
			}
			close($geneListFile);
			print localtime() . ": END Finished processing all alignments.\n";
		}
		
		if($justFamilyAlignment) {
			die "END: --justFamilyAlignment selected. All alignments completed.\n"; 
		}
		## Merge all BAM, sort and index
		print localtime() . ": START data merge and sort.\n";
		$family = $referenceGenome;
		$curgenomeReference = $referenceGenome;

#		unlink("$alignmentDir/$family.bam");
#		system("find $outputDir -name \"*.bam\" > $outputDir/$family.bams.txt");
#		system("ulimit -n 200000; samtools merge -b  $outputDir/$family.bams.txt $alignmentDir/$family.tmp.bam");
#		unlink("$outputDir/$family.bams.txt");
		
#		system("samtools sort $alignmentDir/$family.tmp.bam > $alignmentDir/$family.sort.bam");
#		unlink("$alignmentDir/$family.tmp.bam");

		# Mark snps and indels
#		system("samtools calmd -@ $threads -b $alignmentDir/$family.sort.bam $conservatoryDir/genomes/$curgenomeFamily/$curgenomeReference.fasta.gz > $alignmentDir/$family.bam");
#		unlink("$alignmentDir/$family.sort.bam");
#		system("samtools index $alignmentDir/$family.bam");
			
		##### Now merge conservation data
		unlink("$conservationDir/$family.csv");
		unlink("$conservationDir/$family.bed");
		unlink("$conservationDir/$family.bw");
		
		# merge gene files for entire genome
		system("for a in $conservationDir/$family/*.cns.csv; do cat \$a >> $conservationDir/$family.csv.tmp; done");
		system("for a in $conservationDir/$family/*.bed; do cat \$a | sed 's/ /\t/g' >> $conservationDir/$family.bed; done");
		system("for a in $conservationDir/$family/*.map.csv; do cat \$a >> $conservationDir/$family.map.csv.tmp; done");
	
		# sort files
		system("sort -t',' -k1,1 -k7,7n $conservationDir/$family.csv.tmp | uniq > $conservationDir/$family.sorted.csv");
		system("sort -k1,1 -k2,2n -u -o $conservationDir/$family.bed $conservationDir/$family.bed");
		system("sort -t',' -k1,1 $conservationDir/$family.map.csv.tmp | uniq > $conservationDir/$family.map.sorted.csv");
		unlink("$conservationDir/$family.csv.tmp");
		unlink("$conservationDir/$family.map.csv.tmp");

		# Make nice output files. BW for the phylop track and GFF for the CNS
		system("bedGraphToBigWig $conservationDir/$family.bed $genomesDir/$curgenomeFamily/$curgenomeReference.chrom.size $conservationDir/$family.bw");
		print localtime() . ": END data merge and sort.\n";		
		## Merge CNSs
		print localtime() . ": START build CNS tables.\n";
		my $options;
		if($verbose) { $options .= "--verbose "; }
		if($donotFilter) { $options .= "--do-not-filter "; }
		system("/usr/bin/perl $conservatoryDir/scripts/mergeCNSTables --in-cns $conservationDir/$family.sorted.csv --out-cns $conservationDir/$family.cns.csv --in-map $conservationDir/$family.map.sorted.csv --out-map $conservationDir/$family.map.csv  $options");
		unlink("$conservationDir/$family.sorted.csv");
		unlink("$conservationDir/$family.map.sorted.csv");

		print localtime() . ": END CNS table build.\n";
		
		print localtime() . ": END processing conservation for $family (reference genome $curgenomeName)\n";
	}
}
close($genomedb);
                                                                           
if(! $genomeWasProcessed) { die ("ERROR: No family $family or no reference genome was found in $genomedb_file.\n"); }

print localtime() . ": END conservation processing run.\n";



