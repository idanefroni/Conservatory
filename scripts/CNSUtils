#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw(min max);
use Cwd 'abs_path';
use Getopt::Long;
use lib './scripts';
use ConservatoryUtils;
use CNS;
use CNSDatabase;
use Mapping;
use MappingDatabase;

$|=1;

my $inCNSFileName;
my $inMapFileName;
my $outCNSFileName;
my $outRejectFileName;
my $outMapFileName;
my $help =0;

my $maxCNSLength=250;
my $filterDeepCNS=0;
my $filterRepetitive=0;
my $filterPlastid=0;
my $filterLongCNS=0;
my $fixPositions=0;
my $fixGenome;
my $gffOutputFileName;
my $makegffReference;
my $sortMapFile;

my $filterRepetitiveCNSCutoff = 0.01; ### Filter the top 0.01%
my $regionSearchFlank=75;

my $verbose=0;

my $conservatoryDir=abs_path(".");
my %CNSTable;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"in-cns=s" => \$inCNSFileName,
			"in-map=s" => \$inMapFileName,
			"out-cns=s" => \$outCNSFileName,
			"out-map=s" => \$outMapFileName,
            "out-reject=s" => \$outRejectFileName,
            "filter-deep-cns" => \$filterDeepCNS,
            "filter-repetitive" => \$filterRepetitive,
            "filter-plastid" => \$filterPlastid,
            "filter-long" => \$filterLongCNS,
            "fix-positions" => \$fixPositions,
            "fix-genome=s" => \$fixGenome,
            "make-gff=s" => \$gffOutputFileName,
            "gff-reference=s" => \$makegffReference,
            "sort" => \$sortMapFile,
			"verbose" => \$verbose,
			"help" => \$help) or die ("Error in command line arguments\n");
						
if($help || $inCNSFileName eq "" || $inMapFileName eq "") {
	print "Conservatory version 2.0.1\n\n";

	print "CNSUtils --in-cns <cnsFile> --in-map <cnsPositionMapFile> [--out-cns <cnsFile>] [--out-map <cnsPositionMapFile>].\n";
    print "\t\t[--filter-deep-cns] [--filter-repetitive] [--filter-plastid] [--filter-long] [--fix-positions] [--make-gff <output gff filename> --gff-reference <reference genome>] [--verbose]\n\n";
    print "\n\nFilter the merged CNS file based on the following rules:\n";
    print "   - Remove Deep CNS (deeper than node N14) that are only called by one reference\n";
    print "   - Remove highly repetitive sequences\n";
    print "   - Remove plastid CNS\n\n";
    print "   - Fix positions Verify (and correct if needed) the positions of the CNS in all genomes\n";
    print "   - Make GFF - create a GFF file\n\n\n";
	
	exit();
}

if($verbose) { print "Starting filtering. $inCNSFileName, $inMapFileName. Filters: $filterDeepCNS $filterRepetitive $filterPlastid $filterLongCNS $fixPositions.\n"; }

### Read CNS file

my $CNSDB = new CNSDatabase($inCNSFileName, $verbose);

if(defined $gffOutputFileName) {
    if(!defined $makegffReference) { die "ERROR: No reference provided for GFF.\n";}
    my $mappingDB = new MappingDatabase("grep $makegffReference $inMapFileName |", 1, $makegffReference);

    open(my $gffOutputFile, ">$gffOutputFileName");
    foreach my $curCNS ( @{ $CNSDB->getCNSByOrder() }) {
        my $locusMerge="";
        my @mappings = @{ $mappingDB->getMappingsForCNS($curCNS) };

        if (scalar @mappings >0) {
            my @mappingsInRef;
            foreach my $curMapping (@mappings) {
                if(geneToGenome($curMapping->getLocus()) eq $makegffReference) {
                    push @mappingsInRef, $curMapping;
                    my $newLocus = geneToLocus($curMapping->getLocus());
                    if(index($locusMerge, $newLocus) == -1) {
                        $locusMerge = $locusMerge . $newLocus . "|";
                    }
                }
            }

            if(scalar @mappingsInRef >0) {
                $locusMerge = substr($locusMerge, 0, length($locusMerge)-1);
                my $node = $curCNS->getConservationLevel();
                my $conservationLevel = nodeToLevel($node);

                @mappingsInRef = reverse sort { $a->getAbsChr() cmp $b->getAbsChr() ||
                                                $a->getAbsPos() cmp $b->getAbsPos() } @mappingsInRef;

                my $lastMapping;
                foreach my $curMapping (@mappingsInRef) {
                    if(defined $lastMapping && $lastMapping->overlap($curMapping)) { next; }

                    print $gffOutputFile join("\t", $curMapping->getAbsChr(),
                                         "Conservatory2",
                                            "CNS",
                                            $curMapping->getAbsPos(),
                                            $curMapping->getAbsPos() + $curMapping->getAbsLen() -1,
                                            ".",
                                            $curMapping->getStrandInGenome(),
                                            ".",
                                            "Syntenic_loci=" . $locusMerge .
                                            ";Name=" . $curCNS->getID() . ";Species=" . $curCNS->getSupportingSpeciesNumber() . 
                                            ";Node=" . $node . 
                                            ";Level=" . $conservationLevel . 
                                            ";Original_CNS=" . $curCNS->getLocus() .
                                            ";Ancesteral=" . $curCNS->getSeq() .  "\n");

                    $lastMapping= $curMapping;
                }
            }
        }
    }

    close($gffOutputFile);
    die;
}


my $mappingDB = new MappingDatabase($inMapFileName, 0);

if($fixPositions) {
    my $totalVerifiedPositions=0;
    my $totalFixedPositions=0;
    my $totalRejectedPositions=0;

    my %genomeToFamily;

    if($verbose) { print "PROGRESS: Begin verifying positions\n"; }
    my $genomeDB = new GenomeDatabase($conservatoryDir);

    my $curGenome="";
    my $curGenomeSequence;

    my $inSortedMapFile;
    if($sortMapFile) {
        $mappingDB->orderMappingByGenome();
    }
    my $outMapRejectFile;
    if(defined $outRejectFileName) {
        open ($outMapRejectFile ,">" , $outRejectFileName);
    }

    foreach my $curMapping (@{ $mappingDB->getMappingsByOrder() }) {
        
       if( (defined $fixGenome && ($curMapping->getGenome() ne $fixGenome)) ||  !$curMapping->hasAbsCoordiantes() ) { next; }

       if(geneToGenome($curMapping->getLocus()) ne $curGenome) {
            clearGeneCooordinateDatabase();
            $curGenome = geneToGenome($curMapping->getLocus());
            $curGenomeSequence = $genomeDB->readGenome($curGenome);
        }

        if($verbose) { print "PROGRESS: Processing mappings..." . $totalVerifiedPositions++ . " ($curGenome)....\r" };

        if($curMapping->getAbsEnd() > length($curGenomeSequence->{ cleanChrName($curMapping->getAbsChr()) })+1) {
            if(defined $outRejectFileName) {
                $curMapping->print($outMapRejectFile);
            }
            $mappingDB->deleteMapping($curMapping);
            next;
        }

        my $newAbsStart = remap($curMapping, $curGenomeSequence);

        if($newAbsStart == -1)  { ## If we failed, try the reverse complement
            $curMapping->flipKeepStrand();
            $newAbsStart = remap($curMapping, $curGenomeSequence);
        }

        if($newAbsStart != -1) {
            ## Get the absolute coordiantes for the gene to update the relative position
            my %geneCoordinates = getGeneCoordinates($genomeDB->getConservatoryDir(), $genomeDB->genomeToFamily( geneToGenome($curMapping->getLocus() ) ),  geneToGenome($curMapping->getLocus()), $curMapping->getLocus());
            if($curMapping->getAbsPos() != $newAbsStart) {
                $curMapping->print;
                $totalFixedPositions++;
                $curMapping->setAbsPos($newAbsStart);
                $curMapping->setRelPosFromAbs($newAbsStart, \%geneCoordinates);            
                $curMapping->print;                
            }
        } else {  ### Else, reject
            $curMapping->flipKeepStrand(); ## Flip back.
            $curMapping->print($outMapRejectFile);
            $mappingDB->deleteMapping($curMapping);
            $totalRejectedPositions++
        }
    }
    if(defined $outRejectFileName) {
        close($outMapRejectFile);
    }

    if($verbose) { print "PROGRESS: Done verifying positions. Verified $totalVerifiedPositions. Fixed $totalFixedPositions. Rejected $totalRejectedPositions.\n"; } 
}

### Now Begin filtering
if($filterPlastid) {
    my $plastidFiltered=0;

    foreach my $curMapping ( @{ $mappingDB->getMappingsByOrder() }) {
        if ($curMapping->isPlastid() && $CNSDB->exists($curMapping->getCNSID())) {
            $CNSDB->getCNSByID( $curMapping->getCNSID() )->setComment("PlastidFilter");
            $plastidFiltered++;
        }
    }
    if($verbose) { print "Plastid Filter: Removed $plastidFiltered CNS\n";}
}

if($filterDeepCNS) {
    my $deepCNSFiltered=0;
    foreach my $curCNS ( @{ $CNSDB->getCNSByOrder()}) {
        my $nodeLevel = $curCNS->getConservationLevel();
        $nodeLevel =~ s/N//;

        if(!defined $curCNS->getComment() && ($nodeLevel + 0 <=13) && $curCNS->getRefGenome() ne "Super" ) {
            $curCNS->setComment("DeepFilter");
            $deepCNSFiltered++;
        }
    }
    if($verbose) { print "Deep CNS Filter: Removed $deepCNSFiltered CNS\n"; }
}

if($filterRepetitive) {
    my $repetitiveFiltered=0;
    ## First, establish cutoff
    my @posPerCNS;

    foreach my $curCNS ( @{ $CNSDB->getCNSByOrder()}) {
        my $mappingsPerCNS = $mappingDB->getMappingsForCNS( $curCNS->getID());
        if(defined $mappingsPerCNS) {
            push @posPerCNS, scalar @{ $mappingsPerCNS };
        } else {
            $CNSDB->deleteCNS($curCNS);
        }
    }
    @posPerCNS = reverse sort { $a <=> $b} @posPerCNS;
    my $filterValue = $posPerCNS[ scalar @posPerCNS * ($filterRepetitiveCNSCutoff/100) ];

    foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
        if(!defined $curCNS->getComment() && scalar @{ $mappingDB->getMappingsForCNS( $curCNS->getID())  } > $filterValue)  {
            $curCNS->setComment("RepetitiveFilter");
            $repetitiveFiltered++;
        }
    }
    if($verbose) { print "Filtering highly repetitive CNS (CNS with more than $filterValue positions). Removed $repetitiveFiltered CNS\n"; }

}

my $longFiltered=0;

if($filterLongCNS) {
    foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
        if($curCNS->getLen() > $maxCNSLength) {
           $curCNS->setComment("TooLong");
           $longFiltered++;
        }
    }

    if($verbose) { print "Filtered $longFiltered with length > $maxCNSLength...\n"; }    
}

## open Reject DB
my $rejectCNSDB = new CNSDatabase();

foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
    if(defined $curCNS->getComment()) {
        $rejectCNSDB->add($curCNS);
    }
}
if(defined $outRejectFileName && !$fixPositions && $rejectCNSDB->getNumberOfCNSs()>0) {
    $rejectCNSDB->writeDatabase($outRejectFileName);
}

foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
    if(defined $curCNS->getComment()) {
        $CNSDB->deleteCNS($curCNS);
        $mappingDB->deleteCNS($curCNS);
    }
}

if(defined $outCNSFileName) {
    $CNSDB->writeDatabase($outCNSFileName);
}


if(defined $outMapFileName) {
    $mappingDB->writeDatabase($outMapFileName);
}


##################################################################################################################
##################################################################################################################
##################################################################################################################

sub compareSequences {
    my ($seq1, $seq2) = @_;

    $seq1 = uc($seq1);
    $seq2 = uc($seq2);
    
    my $len = length($seq1);
    my $mismatch_count = 0;

    for (my $i = 0; $i < $len; $i++) {
        my $charSeq1 = substr($seq1, $i, 1);
        my $charSeq2 = substr($seq2, $i, 1);
        next if (! ($charSeq1 =~ /ACGT/ && $charSeq2 =~ /ACGT/));

        if ($charSeq1 ne $charSeq2) {
            return 0;
        }
    }
    return 1;
}


sub remap {
    my ($curMapping, $curGenomeSequence) = @_;

    my $searchSequence = $curMapping->getTargetSeqInGenome();
    my $startCoordBias = min(0,$curMapping->getAbsPos() - $regionSearchFlank -1);  ### If this is the start of the choromosome and we donot have enough flank sequeuence
                                                                     ## record where we started
    my $regionSequence = substr($curGenomeSequence->{cleanChrName($curMapping->getAbsChr() )}, max(0,$curMapping->getAbsPos() - $regionSearchFlank - 1), $curMapping->getAbsLen()+$regionSearchFlank*2);

    my @searchPositions = (0);
    foreach my $curFlankPos (1..$regionSearchFlank) {
        push @searchPositions, $curFlankPos;
        push @searchPositions, -$curFlankPos;        
    }
    my $hitPosition = -1;
    my $foundHit=0; 
    foreach my $curSearchPosition (@searchPositions) {
        if(compareSequences(substr($regionSequence, $regionSearchFlank + $searchPositions[$curSearchPosition]+$startCoordBias, length($searchSequence)), $searchSequence) ) { 
            $hitPosition = $curSearchPosition;
            last;
        }
    }

    if($hitPosition != -1) { ### If we found our sequence, update the coordiantes
        my $newAbsStart = $curMapping->getAbsPos() + $searchPositions[$hitPosition];
        return $newAbsStart;
    } else {
        return -1;
    }
}



sub nodeToLevel {
    my ($node) = @_;

    my @ancientNodes = ("N1","N2","N3","N4","N5","N6","N7","N8");
    my @tracheophyteNodes = ("N9","N10","N11");
    my @angiospermsNodes = ("N12","N13","N14");
    my @dicotNodes = ("N15","N16","N17","N18");
    my @rosidNodes = ("N19","N20");
    my @asteridNodes = ("N167","N168", "N170","N182","N192","N193");
    my @monocotNodes = ("N226","N227","N228","N269","N228","229");

    my $conservationLevel = "Order/Family";
    if( grep( /^$node$/, @ancientNodes) ) { $conservationLevel = "Ancient"; }
    if( grep( /^$node$/, @tracheophyteNodes) ) { $conservationLevel = "Tracheophytes"; }
    if( grep( /^$node$/, @angiospermsNodes) ) { $conservationLevel = "Angiosperms"; }
    if( grep( /^$node$/, @dicotNodes) ) { $conservationLevel = "Dicots"; }
    if( grep( /^$node$/, @monocotNodes) ) { $conservationLevel = "Monocots"; }
    if( grep( /^$node$/, @rosidNodes) ) { $conservationLevel = "Rosides"; }
    if( grep( /^$node$/, @asteridNodes) ) { $conservationLevel = "Asterids"; }

    return $conservationLevel;
}