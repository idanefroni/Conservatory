#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw(min max);
use Cwd 'abs_path';
use Getopt::Long;
use lib './scripts';
use ConservatoryUtils;
use CNS;
use CNSDatabase;
use Mapping;
use MappingDatabase;

$|=1;

my $inCNSFileName;
my $inMapFileName;
my $outCNSFileName;
my $outRejectFileName;
my $outMapFileName;
my $help =0;

my $filterDeepCNS=0;
my $filterRepetitive=0;
my $filterPlastid=0;
my $filterLowSupport=0;
my $fixPositions=0;
my $sortMapFile;

my $filterRepetitiveCNSCutoff = 0.01; ### Filter the top 0.01%
my $regionSearchFlank=100;

my $verbose=0;

my $conservatoryDir=abs_path(".");
my %CNSTable;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"in-cns=s" => \$inCNSFileName,
			"in-map=s" => \$inMapFileName,
			"out-cns=s" => \$outCNSFileName,
			"out-map=s" => \$outMapFileName,
            "out-reject=s" => \$outRejectFileName,
            "filter-deep-cns" => \$filterDeepCNS,
            "filter-repetitive" => \$filterRepetitive,
            "filter-plastid" => \$filterPlastid,
            "filter-low" => \$filterLowSupport,
            "fix-positions" => \$fixPositions,
            "sort" => \$sortMapFile,
			"verbose" => \$verbose,
			"help" => \$help) or die ("Error in command line arguments\n");
						
if($help || $inCNSFileName eq "" || $inMapFileName eq "" || $outCNSFileName eq "" || $outMapFileName eq "" ) {
	print "Conservatory version 2.0.1\n\n";

	print "CNSUtils --in-cns <cnsFile> --in-map <cnsPositionMapFile> --out-cns <cnsFile> --out-map <cnsPositionMapFile>.\n";
    print "\t\t[--filter-deep-cns] [--filter-repetitive] [--filter-plastid] [--fixPositions] [--verbose]\n\n";
    print "\n\nFilter the merged CNS file based on the following rules:\n";
    print "   - Remove Deep CNS (deeper than node N14) that are only called by one reference\n";
    print "   - Remove highly repetitive sequences\n";
    print "   - Remove plastid CNS\n\n";
    print "   - Verify (and correct if needed) the positions of the CNS in all genomes\n";
	
	exit();
}

if($verbose) { print "Starting filtering. $inCNSFileName, $inMapFileName. Filters: $filterDeepCNS $filterRepetitive $filterPlastid $filterLowSupport $fixPositions.\n"; }

### Read CNS file

my $CNSDB = new CNSDatabase($inCNSFileName, $verbose);
#my $mappingDB = new MappingDatabase($inMapFileName, $verbose);
my $mappingDB = new MappingDatabase($inMapFileName, 0);

if($fixPositions) {
    my $totalVerifiedPositions=0;
    my $totalFixedPositions=0;
    my $totalRejectedPositions=0;

    my %genomeToFamily;

    if($verbose) { print "PROGRESS: Begin verifying positions\n"; }
    my $genomeDB = new GenomeDatabase($conservatoryDir);

    my $curGenome="";
    my $curGenomeSequence;

    my $inSortedMapFile;
    if($sortMapFile) {
        $mappingDB->orderMappingByGenome();
    }
    my $outMapRejectFile;
    if(defined $outRejectFileName) {
        open ($outMapRejectFile ,">" , $outRejectFileName);
    }

    foreach my $curMapping (@{ $mappingDB->getMappingsByOrder() }) {
       if(geneToGenome($curMapping->getLocus()) ne $curGenome) {
            clearGeneCooordinateDatabase();
            $curGenome = geneToGenome($curMapping->getLocus());
            $curGenomeSequence = $genomeDB->readGenome($curGenome);
        }

        if($verbose) { print "PROGRESS: Processing mappings..." . $totalVerifiedPositions++ . " ($curGenome)....\r" };

        if($curMapping->getAbsEnd() > length($curGenomeSequence->{ cleanChrName($curMapping->getAbsChr()) })) {
            if(defined $outRejectFileName) {
                $curMapping->print($outMapRejectFile);
            }
            $mappingDB->deleteMapping($curMapping);
            next;
        }

        my $newAbsStart = remap($curMapping, $curGenomeSequence);

        if($newAbsStart == -1)  {         ## If we failed, try a partial mapping
            $newAbsStart = remap($curMapping, $curGenomeSequence, 8);
        }
        if($newAbsStart == -1)  {         ## If we failed, try a partial mapping from the other side
            $newAbsStart = remap($curMapping, $curGenomeSequence, -8);
        }


        if($newAbsStart == -1)  { ## If we failed, try the reverse complement
            $curMapping->flipKeepStrand();
            $newAbsStart = remap($curMapping, $curGenomeSequence);
        }

        if($newAbsStart == -1)  {         ## If we failed, try a partial mapping
            $newAbsStart = remap($curMapping, $curGenomeSequence, 8);
        }

        if($newAbsStart == -1)  {         ## If we failed, try a partial mapping from the other side
            $newAbsStart = remap($curMapping, $curGenomeSequence, -8);
        }

        if($newAbsStart != -1) {
            ## Get the absolute coordiantes for the gene to update the relative position
            my %geneCoordinates = getGeneCoordinates($genomeDB->getConservatoryDir(), $genomeDB->genomeToFamily( geneToGenome($curMapping->getLocus() ) ),  geneToGenome($curMapping->getLocus()), $curMapping->getLocus());
            if($curMapping->getAbsPos() != $newAbsStart) { $totalFixedPositions++; }
            $curMapping->setAbsPos($newAbsStart);
            $curMapping->setRelPosFromAbs($newAbsStart, \%geneCoordinates);
        } else {  ### Else, reject
            $curMapping->print($outMapRejectFile);
            $mappingDB->deleteMapping($curMapping);
            $totalRejectedPositions++
        }
    }
    if(defined $outRejectFileName) {
        close($outMapRejectFile);
    }
    if($verbose) { print "PROGRESS: Done verifying positions. Verified $totalVerifiedPositions. Fixed $totalFixedPositions. Rejected $totalRejectedPositions.\n"; } 
}

### Now Begin filtering
if($filterPlastid) {
    my $plastidFiltered=0;

    foreach my $curMapping ( @{ $mappingDB->getMappingsByOrder() }) {
        if ($curMapping->isPlastid()) { $CNSDB->getCNSByID( $curMapping->getCNSID() )->setComment("PlastidFilter"); }
        $plastidFiltered++;
    }
    if($verbose) { print "Plastid Filter: Removed $plastidFiltered CNS\n";}
}

if($filterDeepCNS) {
    my $deepCNSFiltered=0;
    foreach my $curCNS ( @{ $CNSDB->getCNSByOrder()}) {
        my $nodeLevel = $curCNS->getConservationLevel();
        $nodeLevel =~ s/N//;

        if(!defined $curCNS->getComment() && ($nodeLevel + 0 <=13) && $curCNS->getRefGenome() ne "Super" ) {
            $curCNS->setComment("DeepFilter");
            $deepCNSFiltered++;
        }
    }
    if($verbose) { print "Deep CNS Filter: Removed $deepCNSFiltered CNS\n"; }
}

if($filterRepetitive) {
    my $repetitiveFiltered=0;
    ## First, establish cutoff
    my @posPerCNS;

    foreach my $curCNS ( @{ $CNSDB->getCNSByOrder()}) {
        my $mappingsPerCNS = $mappingDB->getMappingsForCNS( $curCNS->getID());
        if(defined $mappingsPerCNS) {
            push @posPerCNS, scalar @{ $mappingsPerCNS };
        } else {
            $CNSDB->deleteCNS($curCNS);
        }
    }
    @posPerCNS = reverse sort { $a <=> $b} @posPerCNS;
    my $filterValue = $posPerCNS[ scalar @posPerCNS * ($filterRepetitiveCNSCutoff/100) ];

    foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
        if(!defined $curCNS->getComment() && scalar @{ $mappingDB->getMappingsForCNS( $curCNS->getID())  } > $filterValue)  {
            $curCNS->setComment("RepetitiveFilter");
            $repetitiveFiltered++;
        }
    }
    if($verbose) { print "Filtering highly repetitive CNS (CNS with more than $filterValue positions). Removed $repetitiveFiltered CNS\n"; }

}

my $lowSupportFiltered=0;

if($filterLowSupport) {
    foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
        if(!defined $curCNS->getSupportingSpecies($mappingDB) ) {
            $curCNS->setComment("LowSupportFilter");
            $lowSupportFiltered++;      
        } elsif( scalar @{ $curCNS->getSupportingSpecies($mappingDB) } < $minSpeciesForCNS) {
            $curCNS->setComment("LowSupportFilter");
            $lowSupportFiltered++;
        }
    }
    if($verbose) { print "Filtered $lowSupportFiltered for low support...\n"; }    
}


if($verbose) { print "Finished filtering. Writing...\n"; }

## open Reject DB
my $rejectCNSDB = new CNSDatabase();

foreach my $curCNS (  @{ $CNSDB->getCNSByOrder()} ) {
    if(defined $curCNS->getComment()) {
        $rejectCNSDB->addCNS($curCNS);
        $CNSDB->deleteCNS($curCNS);
        $mappingDB->deleteCNS($curCNS);
    }
}

$CNSDB->writeDatabase($outCNSFileName);

if(defined $outRejectFileName && !$fixPositions) {
    $rejectCNSDB->writeDatabase($outRejectFileName);
}

$mappingDB->writeDatabase($outMapFileName);


sub compareSequences {
    my ($seq1, $seq2) = @_;

    $seq1 = uc($seq1);
    $seq2 = uc($seq2);
    
    my $len = length($seq1);
    my $mismatch_count = 0;

    for (my $i = 0; $i < $len; $i++) {
        my $charSeq1 = substr($seq1, $i, 1);
        my $charSeq2 = substr($seq2, $i, 1);
        next if ($charSeq2 eq 'X');

        if ($charSeq1 ne $charSeq2) {
            return 0;
        }
    }
    return 1;
}


sub remap {
    my ($curMapping, $curGenomeSequence, $partial) = @_;

    my $targetSequence = $curMapping->getSeq();
    $targetSequence =~ s/-//g; ## remove the gaps
    my $searchSequence= $targetSequence;

    if($curMapping->getStrandInGenome() eq "-") { 
        $searchSequence = reverseComplement($searchSequence);
    }
    if(defined $partial) {
        if($partial>0) {
            $searchSequence = substr($searchSequence, 0, min($partial, length($searchSequence)));
        } else {
            $partial = max( $partial, -length($searchSequence));
            $searchSequence = substr($searchSequence, length($searchSequence) + $partial, abs($partial));
        }
    }

    my $startCoordBias = min(0,$curMapping->getAbsPos() - $regionSearchFlank);  ### If this is the start of the choromosome and we donot have enough flank sequeuence
                                                                     ## record where we started

    my $regionSequence = substr($curGenomeSequence->{cleanChrName($curMapping->getAbsChr() )}, max(0,$curMapping->getAbsPos() - $regionSearchFlank - 1), $curMapping->getAbsLen()+$regionSearchFlank*2);
       
    my $hitPosition = length($regionSequence);
    my $curPositionInRegion=0;
    while( $curPositionInRegion < length($regionSequence) ) {
        if(compareSequences(substr($regionSequence,$curPositionInRegion, length($searchSequence)), $searchSequence)) {
            if( abs($curPositionInRegion - $regionSearchFlank) < abs($hitPosition - $regionSearchFlank)  ) {
                $hitPosition = $curPositionInRegion;
            }
        }
        $curPositionInRegion++;
    }
    
    if($hitPosition != length($regionSequence)) { ### If we found our sequence, update the coordiantes
        my $newAbsStart = $curMapping->getAbsPos() - $regionSearchFlank + $hitPosition - $startCoordBias;
        ### if it was a partial fit, update the sequence
        if(defined $partial) {
            if($partial>0) {
                $curMapping->setSeq(substr($regionSequence, $hitPosition, $curMapping->getAbsLen()) );
            } else {
                $curMapping->setSeq(substr($regionSequence, $hitPosition -$curMapping->getAbsLen() -$partial, $curMapping->getAbsLen()) );
                $newAbsStart = $newAbsStart - $curMapping->getAbsLen() - $partial;
            }
        }
        return $newAbsStart;
    } else {
        return -1;
    }
}