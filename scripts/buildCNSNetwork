#!/usr/bin/perl

use POSIX;
use strict;
use Cwd 'abs_path';
use List::Util qw(min max);
use Statistics::Descriptive;
use Getopt::Long;
use Bio::AlignIO;
use Bio::Tools::GFF;
use Bio::SeqFeatureI;


my $lociListFileName;
my $networkName="myNetwork";
my $conservatoryDir=abs_path(".");
my $genomeDatabaseFileName = "genome_database.csv";
my $help=0;
my $force=0;

GetOptions ("conservatory-directory=s" => \$conservatoryDir,
		    "genome-database=s" => \$genomeDatabaseFileName,
			"loci-list=s" => \$lociListFileName,
			"name=s" => \$networkName,
			"help" => \$help) or die ("Error in command line arguments\n");
			
			
if($help || $lociListFileName eq "") {
   print "buildCNSNetwork --loci-list <File name containing list of genes>\n\n\n";
   print "\t--conservatory-directory\t\tPath of the main conservatory directory.\n";
   print "\t--loci-list\t\t\tFile containing list of genes (REQUIRED).\n";
   print "\t--name\t\t\tName prefix for output files.\n";
   print "\t--help\t\t\tShow this message.\n";

   die;
}


#### Read the genome database file
my %genomeDatabase;
my $genomedbFile = "$conservatoryDir/$genomeDatabaseFileName";
my $tmpDir = "$conservatoryDir/tmp/";

open (my $genomeDatabase, "<", $genomedbFile);
while(my $curgenomeline = <$genomeDatabase>) {
	if(substr($curgenomeline,0,1) ne "#")  {
		chomp($curgenomeline);
		my ($curgenomeName, $curgenomeSpecies,  $curgenomeFamily, $curgenomeReference, $upstreamLength, $downstreamLength, $geneNameField, $geneProcessingRegEx, $gene2SpeciesIdentifier, $proteinProcessingRegEx,$classification) = split /,/, $curgenomeline;
		$genomeDatabase{$curgenomeSpecies}{'Family'} = $curgenomeFamily;
		$genomeDatabase{$curgenomeSpecies}{'Species'} = $curgenomeSpecies;
		$genomeDatabase{$curgenomeSpecies}{'Classification'} = $classification;	
	}
}

###### First, assemble the CNS and mapping
my $allCNSFileName = "$conservatoryDir/output/All.cns.csv.tmp";
my $allPositionsFileName = "$conservatoryDir/output/All.map.csv.tmp";

my $allCNSMergedFileName = "$conservatoryDir/output/All.merged.cns.csv";
my $allPositionsMergedFileName = "$conservatoryDir/output/All.merged.map.csv";
my $allMergedDeepCNSFileName = "$conservatoryDir/output/All.merged.deep.cns.csv";

my $myLociPositionsFileName = "$conservatoryDir/output/$networkName.map.csv";

#my $mergedCNSFileName = "$conservatoryDir/output/$networkName.cns.csv";
#my $mergedMapFileName = "$conservatoryDir/output/$networkName.map.csv";


## If we don't have the merged CNS files, generate them
if(!((-e $allCNSMergedFileName) & (-e $allPositionsMergedFileName))) {
	print localtime(). ": Assemble all alignments...\n";
	system("cat $conservatoryDir/CNS/*.map.csv > $allPositionsFileName");

	print localtime(). ": Assemble all CNS...\n";
	system("cat $conservatoryDir/CNS/*.cns.csv > $allCNSFileName");

	###### merge CNS
	system("perl $conservatoryDir/scripts/mergeCNSTables --in-cns $allCNSFileName --in-map $allPositionsFileName --out-cns $allCNSMergedFileName --out-map $allPositionsMergedFileName --out-merged $allMergedDeepCNSFileName");
	unlink($allCNSFileName);
	unlink($allPositionsFileName);
}

#### Now filter just for the loci we want

system("cut -d',' -f1 $conservatoryDir/$lociListFileName | sed 's/.*-.*-//' | grep -f - $allPositionsMergedFileName | cut -d',' -f1 | grep -f - $allPositionsMergedFileName > $myLociPositionsFileName");

### Build the CNS dictionary hash
my %cnsDic;
my %nodesDic;

my %nodeCNSHistory;
open(my $allCNSFile, $allCNSMergedFileName) || die ("Internal error");

while(my $cnsLine = <$allCNSFile>) {
	chomp($cnsLine);
	my ($referenceGenome, $CNSID, $chromosome, $strand, $start, $end, $locus, $relStart, $relEnd, $level, $supportingSpecies, $orfLength, $orfDir, $omega, $ancesteralSeq) = split /,/, $cnsLine;

	$cnsDic{$CNSID} = {
				'ReferenceGenome' => $referenceGenome,
				'CNSID' => $CNSID,
				'Chromosome' => $chromosome,
				'Strand' => $strand,
				'Start' => $start,	
				'End' => $end,
				'Locus' => $locus,
				'RelStart' => $relStart,
				'RelEnd' => $relEnd,
				'Level' => $level,
				'SupportingSpecies' => $supportingSpecies,
				'ORFLength' => $orfLength,
				'ORFDir' => $orfDir,
				'Omega' => $omega,
				'AncesteralSeq' => $ancesteralSeq
	};
	
	$nodesDic{$CNSID}{'Type'} = "CNS";
	$nodesDic{$CNSID}{'Name'} = $CNSID;
	$nodesDic{$CNSID}{'Species'} = $referenceGenome;
	$nodesDic{$CNSID}{'Family'}="CNS";
	$nodesDic{$CNSID}{'Level'}=$level;
	$nodesDic{$CNSID}{'ORF'}= floor( (1+$orfLength)/3);
	$nodesDic{$CNSID}{'Classification_1'}="";
	$nodesDic{$CNSID}{'Classification_2'}="";
	$nodesDic{$CNSID}{'Classification_3'}="";
	$nodesDic{$CNSID}{'Classification_4'}="";
	$nodesDic{$CNSID}{'Classification_5'}="";
	$nodesDic{$CNSID}{'Classification_6'}="";	
}
close($allCNSFile);

## Now make network sif file
my $outputSIFFileName = "$conservatoryDir/output/$networkName.network.sif";
my $outputDictionaryFileName = "$conservatoryDir/output/$networkName.dic.csv";

open(my $outputSIFFile, ">$outputSIFFileName");
open(my $outputDictionaryFile, ">$outputDictionaryFileName");
my %usedCNS;

open (my $nodeFile, $myLociPositionsFileName) || die ("Internal error");
while(my $curNodeLine = <$nodeFile>) {
	chomp($curNodeLine);
	my ($CNSID, $targetGenome, $targetLocus, $targetRelativePosition, $referenceRelativePosition, $length) = split /,/, $curNodeLine;
	$usedCNS{$CNSID} =1;	
	my @classification = split /-/, $genomeDatabase{$targetGenome}{'Classification'};

	$nodesDic{$targetLocus}{'Type'} = "Locus";
	$nodesDic{$targetLocus}{'Name'} = $targetGenome;	
	$nodesDic{$targetLocus}{'Species'} = $genomeDatabase{$targetGenome}{'Species'};
	$nodesDic{$targetLocus}{'Family'} = $genomeDatabase{$targetGenome}{'Family'};
	$nodesDic{$targetLocus}{'Level'}="";
	$nodesDic{$targetLocus}{'ORF'}="";

	$nodesDic{$targetLocus}{'Classification_1'}=$classification[0];
	$nodesDic{$targetLocus}{'Classification_2'}=$classification[1];
	$nodesDic{$targetLocus}{'Classification_3'}=$classification[2];
	$nodesDic{$targetLocus}{'Classification_4'}=$classification[3];
	$nodesDic{$targetLocus}{'Classification_5'}=$classification[4];
	$nodesDic{$targetLocus}{'Classification_6'}=$classification[5];
	### Remove duplicates
	if(! (defined $nodeCNSHistory{$targetLocus}{$CNSID})) { 
		print $outputSIFFile "$targetLocus has $CNSID\n";
		$nodeCNSHistory{$targetLocus}{$CNSID} = 1;
	}
}


open (my $mergedCNSFile, $allMergedDeepCNSFileName);
while(my $curMergedCNSLine = <$mergedCNSFile>) {
	chomp ($curMergedCNSLine);
	my ($CNSIDA,$CNSIDB) = split /,/, $curMergedCNSLine;
	if((defined $usedCNS{$CNSIDA}) || (defined $usedCNS{$CNSIDB})) {
		print $outputSIFFile  "$CNSIDA is $CNSIDB\n";
	}
}

## read the short name
open (my $lociListFile, $lociListFileName) || die ("Internal error");

while(my $lociLine = <$lociListFile>) {
	chomp($lociLine);
	my ($locus,$genename) = split /,/, $lociLine;
	$nodesDic{$locus}{'Type'} = "ReferenceLocus";	
	$nodesDic{$locus}{'Name'} = $genename;
}

#### Now dump dictionary
print $outputDictionaryFile join(",",
				"ID",
				"Type",
				"Name",
				"Species",
				"Family",
				"Level",
				"ORFLength",
				"Classification 1",
				"Classification 2",
				"Classification 3",
				"Classification 4",
				"Classification 5",
				"Classification 6") . "\n";									

foreach my $curNode (keys %nodesDic) {
									
	print $outputDictionaryFile join(",",$curNode,
						  $nodesDic{$curNode}{'Type'},
						  $nodesDic{$curNode}{'Name'},
						  $nodesDic{$curNode}{'Species'},
						  $nodesDic{$curNode}{'Family'},
						  $nodesDic{$curNode}{'Level'},										
						  $nodesDic{$curNode}{'ORF'},
						  $nodesDic{$curNode}{'Classification_1'},
						  $nodesDic{$curNode}{'Classification_2'},
						  $nodesDic{$curNode}{'Classification_3'},
						  $nodesDic{$curNode}{'Classification_4'},
						  $nodesDic{$curNode}{'Classification_5'},
						  $nodesDic{$curNode}{'Classification_6'}) . "\n";
										
}
close($mergedCNSFile);
close($nodeFile);


close($outputSIFFile);
close($outputDictionaryFile);

