#!/usr/bin/perl
use strict;
use List::Util qw(min max);
use Bio::AlignIO;
use Bio::Tools::GFF;
use Bio::SeqFeatureI;
use Cwd;
use Cwd 'abs_path';
use Getopt::Long;

my $conservatoryDir=abs_path(".");
my $genome;
my $help;
#################################
#####  Generate a fasta file of first introns for all genes
#####

GetOptions ("conservatory-directory=s" => \$conservatoryDir,
			"genome=s" => \$genome,
			"help" => \$help) or die ("Error in command line arguments\n");

if($help || $genome eq "") {
   print "\n\tbuildIntronDB --genome <genome>  \n\t\tBuild a sequence fasta file of the first intron for all genes.\n\n";
   print "\t--conservatory-directory\tName of the conservatory directory. Default is current directory.\n";
   print "\t--genome\t\tName of genome.\n";
   print "\t--help\t\tPrints this message.\n\n";
   exit();
}

#### Open genome databse file to extact family and gene name processing parameters
my $genomeFamily;
my $genomeGeneProcessingRegEx;
my $genomeGeneNameField;

my $genomedbFileName = $conservatoryDir . "/genome_database.csv";
die "ERROR: Cannot find file genome database file ($genomedbFileName)\n" unless -e $genomedbFileName;

open (my $genomeDatabase, "<", $genomedbFileName);
while((my $curgenomeline = <$genomeDatabase>)) {
	if(substr($curgenomeline,0,1) ne "#") { 
		my ($curgenomeName, $curgenomeSpecies,  $curgenomeFamily, $curgenomeReference, $upstreamLength, $downstreamLength, $geneNameField, $geneProcessingRegEx, $gene2SpeciesIdentifier, $proteinProcessingRegEx, $classification) = split /,/, $curgenomeline;

		if($genome eq $curgenomeName) {
			$genomeFamily = $curgenomeFamily;
			$genomeGeneProcessingRegEx = $geneProcessingRegEx;
			$genomeGeneNameField = $geneNameField;
		}
	}
}
close($genomeDatabase);
if($genomeFamily eq "") { die "ERROR: Cannot fine genome $genome.\n"; }

my $gffFileName = "$conservatoryDir/genomes/$genomeFamily/$genome.genes.gff3";
my $genomeFastaFileName = "$conservatoryDir/genomes/$genomeFamily/$genome.fasta.gz";
my $outputFileName = "$conservatoryDir/genomes/$genomeFamily/$genome.introns.fasta";

open (my $genomeFile, "gunzip -c $genomeFastaFileName |") || die "ERROR: Cannot open genome fasta $genomeFastaFileName.\n";
#open (my $gfffile, "sort -k1,1 -k4,4n -k3,3r $gffFileName | ") || die "ERROR: cannot open GFF3 gene file $gffFileName";
open (my $outputFile, ">", "$outputFileName");

# read genome
sub clean_chr {
	my $chr = shift(@_);
	chomp($chr);
	$chr = substr($chr,1);
	if(index($chr, " ")!= -1 || index($chr, "\t") != -1) {
		$chr = (split(' ', $chr))[0];
	}
	return "C" . $chr;
}

my %chromosomes;
my $curChromosome;
my $curSeq;

while(my $curLine = <$genomeFile>) {
	if(substr($curLine,0,1) eq ">") {
		if($curSeq ne "") {
			$chromosomes{$curChromosome} = $curSeq;
		}
		$curChromosome = clean_chr($curLine);
		$curSeq = "";
	} else {
		chomp($curLine);
		$curSeq .= $curLine;
	}
}
# dump last chromosome

$chromosomes{$curChromosome} = $curSeq;

my $gffio = Bio::Tools::GFF->new(-file => $gffFileName,
			   					 -gff_version => 3);

my $currentGene;

my $foundFirstExon=0;
my $foundFirstIntron=0;
my $firstExon;
my $firstExonID;
my $dumpIntron=0;

while(my $curFeature = $gffio->next_feature) {
	my $chromosomeName = "C" . $curFeature->seq_id;
	my $type = $curFeature->primary_tag();
	my $intronStart;
	my $intronEnd;

	if($type eq "mRNA") {
		$foundFirstExon=0;
		$foundFirstIntron=0;
	}
	if($type eq "exon") {
		my @featureIDs = $curFeature->get_tag_values('Parent');
		my $featureID = $featureIDs[0];

		if($foundFirstExon == 0) {
			$foundFirstExon=1;
			$firstExon = $curFeature;
			$firstExonID = $featureID;
		} elsif($foundFirstIntron==0 && $featureID eq $firstExonID) {
			$foundFirstIntron=1;
			$intronStart = $firstExon->end;
			$intronEnd = $curFeature->start-1;
			$dumpIntron=1;
		}
	}
	if($type eq "CDS") {
		my @geneNameTag = $curFeature->get_tag_values($genomeGeneNameField);
		my $geneName = $geneNameTag[0];
		my @featureIDs = $curFeature->get_tag_values('Parent');
		my $featureID = $featureIDs[0];

		if($genomeGeneProcessingRegEx ne "") { eval '$geneName =~ s/$genomeGeneProcessingRegEx//g;'; }
		$currentGene = $geneName;
		if($foundFirstExon==0) { ## We got to a CDS without an exon. Hence, this gene's exons are not annotated. Use the CDS annotation
			$foundFirstExon=1;
			$firstExon = $curFeature;
			$firstExonID = $featureID;
#			print "Found First CDS: $geneName " . $firstExon->start() . ":" . $firstExon->end() . "\n";
		} elsif($foundFirstIntron==0 && $featureID eq $firstExonID) {
			$foundFirstIntron=1;
			$intronStart = $firstExon->end;
			$intronEnd = $curFeature->start-1;
#			print "Found Second CDS: $geneName " . $curFeature->start() . ":" . $curFeature->end() . "\n";
			$dumpIntron=1;
		}
	}
	if($dumpIntron) {
		if($intronStart > $intronEnd) { die "ERROR: GFF3 file $gffFileName is not sorted.\n"; }
		my $intronSeq = substr($chromosomes{$chromosomeName}, $intronStart-1, $intronEnd-$intronStart);
		if($curFeature->strand() eq "-") {
			$intronSeq = reverse $intronSeq;
			$intronSeq =~ tr/ACGT/TGCA/;
		}
		print $outputFile ">$currentGene\n$intronSeq\n";
		#print ">$currentGene:$chromosomeName:$intronStart:$intronEnd\n";
		$dumpIntron=0;
	}

}
$gffio->close();

close($outputFile);

system("bgzip $outputFileName");

