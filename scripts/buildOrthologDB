#!/usr/bin/perl
use POSIX;

use strict;
no warnings 'experimental'; 

use Cwd 'abs_path';
use Getopt::Long;

my $genomeDatabaseFileName = "genome_database.csv";

my $MAX_ORTH=8;
my $MIN_EVAL= 10;
my $EVAL_CUTOFF_FOR_FAMILY=0.33;
my $conservatoryDir=abs_path(".");
my $help=0;
my $genome="";
my $referenceGenome="";
my $referenceGenomeFamily="";
my $referenceGenomeSpecies="";
my $family="";
my $species;
my $genomefound = 0;
my $verbose =0;

my $line;
GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
				"genome-database=s" => \$genomeDatabaseFileName,
			"genome=s" => \$genome,
			"reference=s" => \$referenceGenome,
			"verbose" => \$verbose,
			"help" => \$help) or die("Error in command line arguments\n");
			
			
if( $genome eq "" || $help) {
	print "Conservatory version 0.0.1\n\n";
	
	print "buildOrthologDB\n\n";
	print "\t--conservatoryDirectory\tPath of the main conservatory directory. See README for directory structure. (DEFAULT: current directory)\n";
	print "\t--genome-database\t\tGenome database file name (DEFAULT: genome_database.csv).\n";	
	print "\t--reference\t\tReference genome name (for global mode). \n";
	print "\t--genome\t\tGenome name for which to build putative ortholog databse (REQUIRED). \n";
	print "\t--verbose\t\tPrint extra infromation.\n\n";
    	exit();
}
my $genomedb_file = "$conservatoryDir/$genomeDatabaseFileName";

##### Sanity checks.
die "ERROR: Cannot find file genome database file ($genomedb_file)\n" unless -e $genomedb_file;
die "ERROR: Conservatory directory structure at ($conservatoryDir) is corrupt\n" unless (-e "$conservatoryDir/genomes/tmpblast");

######### Find out what is the reference genome and the processing REGEX
open(my $genomedb, "<", $genomedb_file);
my $header=<$genomedb>;
my $geneProcessingREGEX="";
my $referenceGeneProcessingREGEX="";

while(<$genomedb>) {
	chomp;
	my @genomeDBLine = split /,/;
	if($genomeDBLine[0] eq $genome) {
		if($referenceGenome eq "") {
			$referenceGenome = $genomeDBLine[3];
		}
		$family = $genomeDBLine[2];
		$species = $genomeDBLine[1];
		$geneProcessingREGEX = $genomeDBLine[9];
	}
}

#move back to the begining of the genome databse file
seek $genomedb,0, SEEK_SET;

# Now find the processing REGEX for the reference genome
while(<$genomedb>) {
	chomp;
	my @genomeDBLine = split /,/;
	if($genomeDBLine[0] eq $referenceGenome) {
		$referenceGenomeFamily = $genomeDBLine[2];
		$referenceGenomeSpecies = $genomeDBLine[1];
		$referenceGeneProcessingREGEX = $genomeDBLine[9];
	}
}
close($genomedb);

die "ERROR: Cannot file genome $genome in database.\n" unless $family ne "";
die "ERROR: Cannot file reference genome $genome in database.\n" unless $referenceGenomeFamily ne "";

my $genome2refFileName = "$conservatoryDir/genomes/tmpblast/$genome" . "2" . "$referenceGenome" . ".txt";
my $ref2genomeFileName = "$conservatoryDir/genomes/tmpblast/$referenceGenome" . "2" . "$genome" . ".txt";
my $outputOrthologFileName = "$conservatoryDir/genomes/$family/$referenceGenome.$genome.orthologs.csv";
my $footprintGFFFileName = "$conservatoryDir/genomes/$family/$genome.footprint.gff3";

open (my $gffFile, "<", $footprintGFFFileName ) or die "ERROR: Cannot open footprint file $footprintGFFFileName.\n";

open (my $g2ref, "<", $genome2refFileName ) or die "ERROR: Cannot open blast results file $genome2refFileName.\n";
open (my $ref2g, "<", $ref2genomeFileName) or die "ERROR: Cannot open blast results file $ref2genomeFileName.\n";
open (my $output, ">", "$outputOrthologFileName.tmp");

### Set up the filter of acceptable genes (those that have promoter sequences) 
my @genesWithFootprint;
while(my $line = <$gffFile>) {
	chomp($line);
	my @array = split /\t/, $line;
	my %genename = split /[;=]/, $array[8];
	push (@genesWithFootprint, $genename{'Name'});
}
close($gffFile);

#load the whole genome to reference blast table into a hash

my $curlocus = "";
my $curRefLocus ="";
my %genome2RefHits;
my $orthologCounts;
my %ref2GenomeHits;
my @possibleOrthologPairs;

while(my $curline = <$g2ref>) {

	chomp($curline);
	my @line_s = split(/\t/, $curline);
	my $locus = $line_s[0];
	my $refLocus = $line_s[1];
	my $eval = $line_s[10];
	
	### Translate protein name to  full and unique gene name
	if($referenceGeneProcessingREGEX ne "") { eval '$refLocus =~ s/$referenceGeneProcessingREGEX//g;'; }
	if($geneProcessingREGEX ne "") { eval '$locus =~ s/$geneProcessingREGEX//g;'; }
	$locus = "$species-$genome-$locus";
	$refLocus = "$referenceGenomeSpecies-$referenceGenome-$refLocus";
	
	
	if($eval < $MIN_EVAL) {
		if($eval ==0) { 
			$eval = 400;
		} else {
			$eval = -log($eval);
		}
		if($locus ne $curlocus) { $orthologCounts=0};
		$curlocus = $locus;

		if($orthologCounts < $MAX_ORTH) {
		
			my $key = "$locus;$refLocus";
			if($verbose) { print "Found $key.\n"; }

			if(defined $genome2RefHits{$key}) {
				if($eval > $genome2RefHits{$key}) {
					$genome2RefHits{$key} = $eval;
				}
			} else {
				$orthologCounts++;
				$genome2RefHits{$key} = $eval;
			}
		}
	}
}
print localtime() . ": PROGRESS : Done reading genome to reference blast. Read " . (scalar (keys %genome2RefHits)) . " pairs.\n";



while(my $curline = <$ref2g>) {

	chomp($curline);
	my @line_s = split(/\t/, $curline);
	my $refLocus = $line_s[0];
	my $locus = $line_s[1];
	my $eval = $line_s[10];

	### Translate protein name to  full and unique gene name
	if($referenceGeneProcessingREGEX ne "") { eval '$refLocus =~ s/$referenceGeneProcessingREGEX//g;'; }
	if($geneProcessingREGEX ne "") { eval '$locus =~ s/$geneProcessingREGEX//g;'; }
	$locus = "$species-$genome-$locus";
	$refLocus = "$referenceGenomeSpecies-$referenceGenome-$refLocus";
	
	if($eval < $MIN_EVAL) {
		if($eval ==0) { 
			$eval = 400;
		} else {
			$eval = -log($eval);
		}	
		if($refLocus ne $curRefLocus) {

			if($curRefLocus ne "") {  ### We are done reading. Lets compute best putative orthologs and dump them to file
				# first, compute cut off
				my @allevals;
				
				foreach(@possibleOrthologPairs) {
					push(@allevals, ($ref2GenomeHits{$_} + $genome2RefHits{$_}));
				}
				# now, determine the cutoff (currently a fixed percentage of max eval. Could be more sophisticated in the future)

				@allevals = reverse sort {$a <=> $b}  @allevals;
				my $cutoff = $allevals[0] * $EVAL_CUTOFF_FOR_FAMILY;

				foreach(@possibleOrthologPairs) {
					if( ($ref2GenomeHits{$_} + $genome2RefHits{$_}) > $cutoff) {
						# get rid of weird embelishments
						my $outLocus = $_;
						my $outRefLocus = $_;
						$outLocus =~ s/;.*//;
						$outRefLocus =~ s/.*;//;
							
						#### Check that we have a foot print for that gene.
						# This really should not be, but some genomes are only partially annotated.

						if($outLocus ~~ @genesWithFootprint) {
							print $output ("$outLocus,$outRefLocus," . ($ref2GenomeHits{$_} + $genome2RefHits{$_})  . "\n");
						}
					}
				}
			}
			$orthologCounts=0;
			@possibleOrthologPairs=();
		}
		$curRefLocus = $refLocus;
	
		if($orthologCounts < $MAX_ORTH) {
			my $key = "$locus;$refLocus";
			if(defined $ref2GenomeHits{$key}) {
				if($eval > $ref2GenomeHits{$key}) {
					$ref2GenomeHits{$key} = $eval;
				}
			} else {
				$orthologCounts++;
				$ref2GenomeHits{$key} = $eval;
			}
			if(defined $ref2GenomeHits{$key} && defined $genome2RefHits{$key}) {
				push(@possibleOrthologPairs, $key);
			}
		}
	}
}

			
close($output);
print localtime() . ": PROGRESS : Done reading reference to genome blast. Read " . (scalar (keys %ref2GenomeHits)) . " pairs.\n";

## Finally filter for possible duplicates. This shouldn't happen, but sometimes does with odd annotation of spliceforms
system("awk -F ',' '!seen[\$1\$2]++' $outputOrthologFileName.tmp > $outputOrthologFileName");
unlink("$outputOrthologFileName.tmp");

