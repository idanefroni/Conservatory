#!/usr/bin/perl
use strict;
use List::Util qw(min max);
use Bio::AlignIO;
use Bio::Tools::GFF;
use Bio::SeqFeatureI;

if( @ARGV < 3) {
   print "buildRegulatorySeqDB <upstream|downstream> <FastaFile> <GFFFile> <Length> <OutputFastaFile> [TE Annotation GFF File]\n";
   exit();
}

open (DB, "gunzip -c $ARGV[1] |") || die "can`t open file $ARGV[0]";
open (my $gfffile, "$ARGV[2]") || die "can't open file $ARGV[1]";
open (my $output, ">", "$ARGV[4]");

my $seq;
my $seq_len = $ARGV[3];
my $mode = $ARGV[0];
my $teAnnotationFileName = $ARGV[5];

# read genomeg
my @chromosomes;
my @chromosomes_names;
my $cur_chr_num = 0;
my $cur_chr = <DB>;
my $cur_chrom_seq ="";
sub clean_chr {
	my $chr = shift(@_);
	chomp($chr);
	$chr = substr($chr,1);
	if(index($chr, " ")!= -1 || index($chr, "\t") != -1) {
		$chr = (split(' ', $chr))[0];
	}
	return "C" . $chr;
}

my $cur_line;
while($cur_line = <DB>) {
	if(substr($cur_line,0,1) eq ">") {
		$chromosomes[$cur_chr_num] = $cur_chrom_seq;
		$cur_chr = clean_chr($cur_chr);
		$chromosomes_names[$cur_chr_num] = $cur_chr;
		$cur_chr_num++;
		$cur_chr = $cur_line;
		$cur_chrom_seq = "";
	} else {
		chomp($cur_line);
		$cur_chrom_seq = $cur_chrom_seq . $cur_line;
	}
}
# dump last chromosome
$chromosomes[$cur_chr_num] = $cur_chrom_seq;
$cur_chr = clean_chr($cur_chr);
$chromosomes_names[$cur_chr_num] = $cur_chr;
my %index;
@index{@chromosomes_names} = (0..$#chromosomes_names);

#### Filter TEs, if required
if(-e $teAnnotationFileName) {
	my $gff = Bio::Tools::GFF->new(-file => $teAnnotationFileName,
				   -gff_version => 3);
	while(my $curTE = $gff->next_feature) {
		my $chromosome = "C" . $curTE->seq_id;
		if(defined $index{$chromosome}) {
			my $chromosome_num = $index{$chromosome};
			#print $chromosome . "-" . $chromosome_num . " - " . length($chromosomes[$chromosome_num]) . " - " . $curTE->start . " - " . $curTE->end ."\n"; 
			substr($chromosomes[$chromosome_num], $curTE->start, $curTE->end - $curTE->start) = "X" x ($curTE->end - $curTE->start);
		}
	}
}

my $mylastgeneend_pos=0;
my $mylastchromosome_num=0;

if($mode eq "upstream") {
	while(my $gffline = <$gfffile>)	{
		if(substr($gffline, 1,1) ne "#") {
		chomp($gffline);
		my @genefields = split(/\t/, $gffline);
		my %geneinfo = split /[;=]/, $genefields[8];
		my $genename = $geneinfo{"Name"};
								
		if($genefields[2] eq "Footprint") {
			my $chromosome = "C" . $genefields[0];
			if((exists $index{$chromosome})) {
				my $chromosome_num = $index{$chromosome};
				my $dir = $genefields[6];
  		
				if($chromosome_num != $mylastchromosome_num) {
					$mylastchromosome_num = $chromosome_num;
					$mylastgeneend_pos= -99999999;
				}

				print $output ">". $genename . "\n";
				my $prom;

				if($dir eq "+") {
					my $loc = $genefields[3];
					my $pstart = $loc - $seq_len;
				
					if($pstart < $mylastgeneend_pos) {
						# one exterme case - overlapping genes. In this case, promoter is NULL. Maybe there is a better way of dealing with this. The problem
						# of using gene coding sequence as promoter is that coding sequences have much higher conservation rates that promoters which will confuse downstream analysis
						if($mylastgeneend_pos >= $loc) {
							$prom = "";
						} else {
							$prom = substr($chromosomes[$chromosome_num], $mylastgeneend_pos-1, $seq_len - $mylastgeneend_pos + $pstart);
						}
					} elsif($pstart <= 0) {
						## If this is at the start of the chromosome and we don't have enough upstream seq
						$prom = substr($chromosomes[$chromosome_num], 0, $loc-1)
					} else {
						$prom = substr($chromosomes[$chromosome_num], $pstart-1, $seq_len);
					}
				} else {
					my $loc = $genefields[4]; 
					## peek at the next line to check when the next gene start. That's not nice programming.
					my $curfilepos = tell $gfffile;
					my $peekgene = <$gfffile>;
					my @peekgenefields = split(/\t/, $peekgene);
					my $nextgenestart = $peekgenefields[3];
					seek($gfffile, $curfilepos,0);
  				
					if($loc + $seq_len > $nextgenestart) {
						# check for overlapping genes...
						if($nextgenestart < $loc) {
							$prom="";
						} else {
							$prom = substr($chromosomes[$chromosome_num], $loc, $nextgenestart - $loc);
						}
					} else {
						$prom = substr($chromosomes[$chromosome_num], $loc, $seq_len);
					}
					# reverse complement sequence
					$prom = reverse $prom;
					$prom =~ tr/ACGT/TGCA/;
				}
				print  $output ('N' x ($seq_len - length($prom)) . $prom . "\n");

				$mylastgeneend_pos = max($genefields[3], $genefields[4]);
			} else {
				#print ("ERROR when processing line $gffline.\n Chromosome $chromosome does not exists\n"); 
			}
		}
	  }
	}
} elsif($mode eq "downstream") {
	my $curseq_len;
	while(my $gffline = <$gfffile>)	{
		if(substr($gffline, 1,1) ne "#") {
			chomp($gffline);
			my @genefields = split(/\t/, $gffline);
			my %geneinfo = split /[;=]/, $genefields[8];
			my $genename = $geneinfo{"Name"};
				
			if($genefields[2] eq "Footprint") {
				my $chromosome = "C" . $genefields[0];
				if((exists $index{$chromosome})) {
					my $chromosome_num = $index{$chromosome};
					my $dir = $genefields[6];
  					if($chromosome_num != $mylastchromosome_num) {
  						$mylastchromosome_num = $chromosome_num;
  						$mylastgeneend_pos=0;
  					}

  					print $output ">". $genename . "\n";
  					my $prom;

  					if($dir eq "+") {
  						my $pstart = $genefields[4]+1;

  						## peek at the next line to check when the next gene start. That's not nice programming.
  						my $curfilepos = tell $gfffile;
  						my $peekgene = <$gfffile>;
  						seek($gfffile, $curfilepos,0);
						my $nextgenestart=0;
						# If this is not the last gene
						if($peekgene ne "") {
  							my @peekgenefields = split(/\t/, $peekgene);
  							$nextgenestart = $peekgenefields[3];
						} else {
							$nextgenestart = $pstart+$seq_len;
						}
  						$curseq_len = $seq_len;

  						# get sequence until the next gene
  						if($pstart+$seq_len > $nextgenestart) {
  							# one exterme case - overlapping genes. In this case, promoter is NULL. Maybe there is a better way of dealing with this. The problem
  							# of usign gene coding sequence as promoter is that coding sequences have much higher conservation rates that promoters which will confiuse downstream analysis
  							if($nextgenestart <= $pstart) {
  								$curseq_len=0;
  							} else {
  								$curseq_len =  $nextgenestart - $pstart-1;
  							}
  						} 				
  						$prom = substr($chromosomes[$chromosome_num], $pstart, $curseq_len);
				} else {
					my $pstart = $genefields[3]-$seq_len;
					my $curseq_len = $seq_len;
					my $geneend = $genefields[3];
					if ($pstart <0 ){
						$pstart=0;
						$curseq_len = $geneend;
					}
   	     	  
					if($pstart < $mylastgeneend_pos) {
						if($geneend < $mylastgeneend_pos) {
							$curseq_len=0;
						} else {
							$curseq_len = $geneend - $mylastgeneend_pos;
							$pstart = $mylastgeneend_pos;
						}
					}
					$prom = substr($chromosomes[$chromosome_num], $pstart-1, $curseq_len);
					# reverse complement sequence
					$prom = reverse $prom;
					$prom =~ tr/ACGT/TGCA/;
				}
				print $output ($prom . ('N' x ($seq_len - length($prom))) . "\n");
				$mylastgeneend_pos = max($genefields[3], $genefields[4]);
			}
		}
	}
  }	
}
