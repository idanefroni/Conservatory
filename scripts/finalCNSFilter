#!/usr/bin/perl
use strict;
use warnings;
use Cwd 'abs_path';
use Getopt::Long;
$|=1;

my $inCNSFileName;
my $inMapFileName;
my $outCNSFileName;
my $outMapFileName;
my $help =0;

my $filterDeepCNS=0;
my $filterRepetitive=0;
my $filterPlastid=0;

my $filterRepetitiveCNSCutoff = 0.01; ### Filter the top 0.01%
my $verbose=0;

my $conservatoryDir=abs_path(".");
my %CNSTable;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"in-cns=s" => \$inCNSFileName,
			"in-map=s" => \$inMapFileName,
			"out-cns=s" => \$outCNSFileName,
			"out-map=s" => \$outMapFileName,
            "filter-deep-cns" => \$filterDeepCNS,
            "filter-repetitive" => \$filterRepetitive,
            "filter-plastid" => \$filterPlastid,
			"verbose" => \$verbose,
			"help" => \$help) or die ("Error in command line arguments\n");
						
if($help || $inCNSFileName eq "" || $inMapFileName eq "" || $outCNSFileName eq "" || $outMapFileName eq "" ) {
	print "Conservatory version 2.0.1\n\n";

	print "finalCNSFilter --in-cns <cnsFile> --in-map <cnsPositionMapFile> --out-cns <cnsFile> --out-map <cnsPositionMapFile>.\n";
    print "\t\t[--filter-deep-cns] [--filter-repetitive] [--filter-plastid] [--verbose]\n\n";
    print "\n\nFilter the merged CNS file based on the following rules:\n";
    print "   - Remove Deep CNS (deeper than node N14) that are only called by one reference\n";
    print "   - Remove highly repetitive sequences\n";
    print "   - Remove plastid CNS\n\n";
	
	exit();
}

if($verbose) { print "Starting filtering. $inCNSFileName, $inMapFileName. Filters: $filterDeepCNS $filterRepetitive $filterPlastid.\n"; }

### Read CNS file
open (my $inCNSFile,"<", $inCNSFileName) ||  die "ERROR: Cannot find CNS file $inCNSFileName.\n";
my $curPos=1;
my $totalCNSNum = ( split(" ",qx(wc -l $inCNSFileName)  ) )[0];

while(<$inCNSFile>) {
	if($verbose) { print "PROGRESS: Loading CNS table.. " . $curPos++ . "/$totalCNSNum.\r" };
	chomp;
	my ($referenceGenome, $CNSID, $chromosome, $strand, $start, $end, $locus, $relStart, $relEnd, $level, $supportingSpecies, $orfLength, $orfDir, $omega, $ancesteralSeq) = split /,/;
    my $multiRefCNS=0;
    if(substr($CNSID,0,5) eq "Super") {
        $multiRefCNS=1;
    }
	$CNSTable{$CNSID} = {
				'ReferenceGenome' => $referenceGenome,
				'CNSID' => $CNSID,
				'Chromosome' => $chromosome,
				'Strand' => $strand,
				'Start' => $start,	
				'End' => $end,
				'Locus' => $locus,
				'RelStart' => $relStart,
				'RelEnd' => $relEnd,
				'Level' => $level,
				'SupportingSpecies' => $supportingSpecies,
				'ORFLength' => $orfLength,
				'ORFDir' => $orfDir,
				'Omega' => $omega,
				'AncesteralSeq' => $ancesteralSeq,
				'multiRefCNS' => $multiRefCNS,
                'Plastid' => 0,
                'Filtered' => 0};
}
close($inCNSFile);
print "\n";

### Now read map file
open (my $inMapFile,"<", $inMapFileName) ||  die "ERROR: Cannot find map file $inMapFileName.\n";
$curPos=1;
my $totalPosCount = ( split(" ",qx(wc -l $inMapFileName)  ) )[0];

while(<$inMapFile>) {
	if($verbose) { print "PROGRESS: Loading mappings..." . $curPos++ . "/$totalPosCount\r" };
	chomp;
	my ($CNSID, $targetSpecies, $targetLocus, $targetRelativePosition, $targetStrand, $referenceRelativePosition, $length, $targetSequence) = split /,/;
	
    if(defined $CNSTable{$CNSID }) {
    	push( @{ $CNSTable{$CNSID}{'Positions'} } , {
				'TargetSpecies' => $targetSpecies,
				'TargetLocus' => $targetLocus,
				'TargetPosition' => $targetRelativePosition,
				'TargetStrand' => $targetStrand,
				'ReferenceRelativePosition' => $referenceRelativePosition,
				'Length' => $length,
				'TargetSequence' => $targetSequence} );	
        if($targetSpecies eq "Athaliana" || $targetSpecies eq "MtrunA17r5" || $targetSpecies eq "pgrisea") {
            my $geneName = $targetLocus;
            $geneName =~ s/.*-//;
            if (substr($geneName,0,3) eq "ATC" || substr($geneName,0,3) eq "ATM" ||
                substr($geneName,0,9) eq "MtrunA17CP" || substr($geneName,0,9) eq "MtrunA17M" ||
                substr($geneName,0,7) eq "PhygriC" || substr($geneName,0,7) eq "PhygriM") {
                $CNSTable{$CNSID}{'Plastid'}=1;
            }
        }
    }
}
close($inMapFile);
print "\n";

### Now Begin filtering
if($filterPlastid) {
    my $plastidFiltered=0;

    foreach my $curCNS (keys %CNSTable) {
        if($CNSTable{$curCNS}{'Plastid'}) {
            $CNSTable{$curCNS}{'Filtered'}=1;
            $plastidFiltered++;
        }
    }
    if($verbose) { print "Plastid Filter: Removed $plastidFiltered of $totalCNSNum\n";}
    $totalCNSNum -= $plastidFiltered;
}

if($filterDeepCNS) {
    my $deepCNSFiltered;
    foreach my $curCNS (keys %CNSTable) {
        my $nodeLevel = $CNSTable{$curCNS}{'Level'};
        $nodeLevel =~ s/N//;

        if(!$CNSTable{$curCNS}{'Filtered'} && ($nodeLevel + 0 <=13) && !$CNSTable{$curCNS}{'multiRefCNS'} ) {
            $deepCNSFiltered++;
            $CNSTable{$curCNS}{'Filtered'}=1;
        }
    }
    if($verbose) { print "Deep CNS Filter: Removed $deepCNSFiltered of $totalCNSNum\n"; }
    $totalCNSNum -= $deepCNSFiltered;
}

if($filterRepetitive) {
    my $repetitiveFiltered;
    ## First, establish cutoff
    my @posPerCNS;
    foreach my $curCNS (keys %CNSTable) {
        push @posPerCNS, scalar @{ $CNSTable{$curCNS}{'Positions'} };
    }
    @posPerCNS = reverse sort { $a <=> $b} @posPerCNS;
    my $filterValue = $posPerCNS[ scalar @posPerCNS * ($filterRepetitiveCNSCutoff/100) ];

    foreach my $curCNS (keys %CNSTable) {
        if(!$CNSTable{$curCNS}{'Filtered'} && scalar @{ $CNSTable{$curCNS}{'Positions'} } > $filterValue) {
            $CNSTable{$curCNS}{'Filtered'}=1;
            $repetitiveFiltered++;
        }
    }
    if($verbose) { print "Filtering repetitive CNS (CNS with more than $filterValue positions). Removed $repetitiveFiltered of $totalCNSNum\n"; }
    $totalCNSNum -= $repetitiveFiltered;    
}

if($verbose) { print "Finished filtering. Overall left with $totalCNSNum CNS. Writing...\n"; }

open(my $outCNSFile, ">" , $outCNSFileName) || die ("ERROR: Cannot open output CNS file $outCNSFileName.\n");
open(my $outMapFile, ">" , $outMapFileName) || die ("ERROR: Cannot open output map file $outMapFileName.\n");

foreach my $curCNS (keys %CNSTable) {
    if(!$CNSTable{$curCNS}{'Filtered'}) {
		print $outCNSFile join(",",
				$CNSTable{$curCNS}{'ReferenceGenome'},
				$CNSTable{$curCNS}{'CNSID'},
				$CNSTable{$curCNS}{'Chromosome'},
				$CNSTable{$curCNS}{'Strand'},
				$CNSTable{$curCNS}{'Start'},	
				$CNSTable{$curCNS}{'End'},
				$CNSTable{$curCNS}{'Locus'},
				$CNSTable{$curCNS}{'RelStart'},
				$CNSTable{$curCNS}{'RelEnd'},
				$CNSTable{$curCNS}{'Level'},
				$CNSTable{$curCNS}{'SupportingSpecies'},
				$CNSTable{$curCNS}{'ORFLength'},
				$CNSTable{$curCNS}{'ORFDir'},
				$CNSTable{$curCNS}{'Omega'},
				$CNSTable{$curCNS}{'AncesteralSeq'}) ."\n";

        foreach my $curMapping (@{ $CNSTable{$curCNS}{'Positions'} }) {
			print $outMapFile join(",",
					$curCNS,
					$curMapping->{'TargetSpecies'},
					$curMapping->{'TargetLocus'},
					$curMapping->{'TargetPosition'},
					$curMapping->{'TargetStrand'},					
					$curMapping->{'ReferenceRelativePosition'},
					$curMapping->{'Length'},
					$curMapping->{'TargetSequence'}) ."\n";
		}
    }
}

close($outCNSFile);
close($outMapFile);