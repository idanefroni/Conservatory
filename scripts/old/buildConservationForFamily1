#!/usr/bin/perl

use POSIX;
use strict;
use Text::CSV;
use Data::Dumper qw(Dumper);
use List::Util qw(min max sum);
use List::MoreUtils qw(uniq firstidx);
use Bio::AlignIO;
use String::Diff;
use Cwd;
use Cwd 'abs_path';
use Getopt::Long;
use experimental 'smartmatch';


################################################################################
######### Setup

my $conservatoryDir=abs_path(".");
my $curDir;
my $locus;
my $family;
my $MIN_ALIGNMENTS = 4; # The minimum number of aligned promoters that is required to generate a MAF file
my $EMPTY_FILE = 0; # The size of an empty MAF file, containing no alignments
my $minIdentity= 60;
my $minCNSLength=6;
my $keep_tmp = 0;
my $verbose = 0;
my $force=0;
my $dump_bam = 0;
my $help = 0;
my $skipPhyloP=0;
my $skipAlignment=0;
my $skipConservation=0;
my $minPhyloPscore=1.2;

########### Parameters
my $upstreamLength;
my $downstreamLength;
my $maffilterDir;
my $avidDir;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"locus=s" => \$locus,
			"family=s" => \$family,
			"min-identity=i" => \$minIdentity,
			"min-species=i" => \$MIN_ALIGNMENTS,
			"min-phylop-score=f" => \$minPhyloPscore,
			"force" => \$force,
			"keep-tmp" => \$keep_tmp,
			"verbose" => \$verbose,
			"dump-bam" => \$dump_bam,
			"skip-alignment" => \$skipAlignment,
			"skip-conservation" => \$skipConservation,
			"skip-phyloP" => \$skipPhyloP,
			"help" => \$help) or die ("Error in command line arguments\n");
			

if( $locus eq "" or $family eq "" or $help) {
	print "Conservatory version 0.0.1\n\n";

   print "buildAlignmentForFamily --family <familyName> --locus <Locus>\n\n\n";
   print "\t--family\tFamily name (REQUIRED).\n";
   print "\t--locus\t\t\tLocus in the reference genome for the family (REQUIRED).\n";
   print "\t--conservatoryDirectory\t\tPath of the main conservatory directory.\n";
   print "\n\t\tAlignment options\n\n";
   print "\t--min-identity\t\tMinimum identity for LASTZ alignments. Default is 60. Use lower number if species are more distant.\n";
   print "\t--min-species\t\tMinimum number of species share sequence for an alignment to be considered for CNS (default: 4).\n";
   print "\t--min-phylop-score\t\tMinimum phyloP score to consider as significant CNS (default: 1.2).\n";
   print "\t--skip-phylop\t\tJust do alignments. Do not compute conservation using phyloP.\n";
   print "\t--skip-alignment\t\tJust do phyloP calculations. Do not perform alignments.\n";
   print "\t--skip-conservation\t\tDo not compute phyloP scores.\n";
   print "\t--keep-tmp\t\tDo not delete all the temporary files produced in the TMP directory.\n";
   print "\t--dump-bam\t\tExport a bam of all pair-wise alignment, translated to absolute coordinates. For JBrowse tracks.\n";
 
   print "\n\t\tGeneral options\n\n";
   print "\t--force\t\tRecompute alignments and CNS even if files exist.\n";
   print "\t--verbose\t\tOutput extra messages.\n";
   print "\t--help\t\t\tPrints this message.\n\n";
   
   exit();
}


### Set up directory and file access
my $genomedbFile = $conservatoryDir . "/genome_database.csv";
my $parameterFile = $conservatoryDir . "/conservatory.parameters.txt";
my $outputDir = "$conservatoryDir/alignments/$family/";
my $outputCNSDir = "$conservatoryDir/CNS/$family/";
my $tmpDir = "$conservatoryDir/alignments/$family/tmp";
my $genomeDir ="$conservatoryDir/genomes/$family";
my $lastzParameters = "--gap=400,100 --nochain --seed=match3 --gapped --strand=both --step=1 --ambiguous=iupac --identity=$minIdentity --ydrop=2500 --hspthreshold=2500 --gappedthresh=2500 --inner=1800";

####### First, sanity checks. Check to see if directory structure is OK and if programs are installed
####### 
die "ERROR: Cannot find file genome database file ($genomedbFile)\n" unless -e $genomedbFile;
die "ERROR: Cannot find file conservatory parameter file ($parameterFile)\n" unless -e $parameterFile;
die "ERROR: Conservatory directory structure at ($conservatoryDir) is corrupt\n" unless (-e "$conservatoryDir/genomes/$family" && -e "$conservatoryDir/genomes/blastdb/" && -e "$conservatoryDir/scripts" && -e "$conservatoryDir/alignments");

my $t_multiz = `sh -c 'command -v multiz'`;
die "ERROR: Cannot find multiz in path. Please make sure it is installed.\n" unless ($t_multiz ne "");  

my $t_lastz = `sh -c 'command -v lastz'`;
die "ERROR: Cannot find lastz in path. Please make sure it is installed.\n" unless ($t_lastz ne ""); 

my $t_samtools = `sh -c 'command -v samtools'`;
die "ERROR: Cannot find samtools in path. Please make sure it is installed.\n" unless ($t_samtools ne "");  

my $t_phyloP = `sh -c 'command -v phyloP'`;
die "ERROR: Cannot find phyloP in path. Please make sure phast is installed.\n" unless ($t_phyloP ne "");  


##################### Read Parameters
if($verbose) { print localtime(). ": Loading parameter file $parameterFile.\n"; }
open (my $parameters, "<", $parameterFile);
while(my $curline = <$parameters>) {
	chomp($curline);
	if(substr($curline,1,1) ne "#") {
		(my $paramName, my $paramValue) = split /=/, $curline;
		if(uc($paramName) eq "UPSTREAMLENGTH") { $upstreamLength = $paramValue; }
		elsif(uc($paramName) eq "DOWNSTREAMLENGTH") { $downstreamLength = $paramValue; }
		elsif(uc($paramName) eq "MAFFILTERDIRECTORY") { $maffilterDir = "$conservatoryDir/$paramValue"; }
		elsif(uc($paramName) eq "AVIDDIRECTORY") { $avidDir = "$conservatoryDir/$paramValue"; }
		elsif($paramName ne "") {  }
	}
}
close($parameters);
if($verbose) { print localtime() . ": Running parameters (upstreamLength $upstreamLength; downstreamLength $downstreamLength).\n"; } 

####### Check presence of programs.

die "ERROR: Cannot find file maffilter program ($maffilterDir/maffilter)\n" unless -e "$maffilterDir/maffilter";
die "ERROR: Cannot find file avid program ($avidDir/avid-linux)\n" unless -e "$avidDir/avid-linux";

###############################################
##### Now set things up
##### Find out what is our reference genome
my $refGenome="";
open (my $genomeDatabase, "<", $genomedbFile);
my $header = <$genomeDatabase>;
while((my $line = <$genomeDatabase>) && $refGenome eq "") {
	(my $curGenome, my $curSpecies, my $curFamily, my $curRefGenome) = split /,/, $line;
	if($curFamily eq $family && $curGenome eq $curRefGenome) { $refGenome = $curGenome; }
}
seek ($genomeDatabase,0,SEEK_SET);
die "ERROR: Cannot find family ($family) or the reference genome for the family in the genome database file.\n" unless $refGenome ne "";
	
####### now make sure our directories exist
if (! -e $outputDir) { mkdir($outputDir); }
if (! -e $tmpDir) { mkdir($tmpDir); }
#remember where we are
$curDir = getcwd;
chdir $tmpDir;

 
### Mow check if alignment is already there
if((!(-e "$outputDir/$locus.up.maf" && -e "$outputDir/$locus.down.maf") || $force ) && ! $skipAlignment) {
  ####### Set up the reference fasta files
  my $upstreamRefFastaName = "$tmpDir/$refGenome.$locus.up.fasta";
  my $downstreamRefFastaName = "$tmpDir/$refGenome.$locus.down.fasta";

  extractFastaToFile("$genomeDir/$refGenome" . ".upstream.fasta.gz", $locus, $upstreamRefFastaName);
  extractFastaToFile("$genomeDir/$refGenome" . ".downstream.fasta.gz", $locus, $downstreamRefFastaName);
  if($verbose) { print localtime() . ": Done extracting reference sequences.\n";}

 	
  # set up orthology hashes
  my %orthologs;
  ##############################################################################
  # Load Genomes
  $header = <$genomeDatabase>;

  while(<$genomeDatabase>) {
	chomp;
	(my $curGenome, my $curSpecies, my $curFamily, my $curRefGenome, my $curMinQuality) = split /,/;

	if($curGenome ne $refGenome && $curFamily eq $family) { #if this is within our family (and not the reference)
		### get ortholog sequences
		open (my $orthologFile, "<", "$genomeDir/$curGenome.orthologs.csv") || die "ERROR: Can't open ortholog file $genomeDir/$curGenome.orthologs.csv.\n";
		while(my $orth_line = <$orthologFile>) {
			chomp($orth_line);
			(my $curPutativeOrtholog, my $curRefLocus, my $score) = split /,/,$orth_line;
			if($curRefLocus eq $locus) {
				my $upstreamFastaName ="$tmpDir/$locus.$curGenome.$curPutativeOrtholog.up.fasta";
				my $downstreamFastaName = "$tmpDir/$locus.$curGenome.$curPutativeOrtholog.down.fasta";
				extractFastaToFile("$genomeDir/$curGenome.upstream.fasta.gz", $curPutativeOrtholog, $upstreamFastaName);
				extractFastaToFile("$genomeDir/$curGenome.downstream.fasta.gz", $curPutativeOrtholog, $downstreamFastaName);

				my $MAFUpFileName = "$locus.$curPutativeOrtholog.up.maf";
				system("lastz --format=maf $lastzParameters $upstreamRefFastaName $upstreamFastaName > $MAFUpFileName");
				my $upQuality = getMAFQuality($MAFUpFileName);
				my $avidQuality;
				
				system("$avidDir/avid-linux -nm=both $upstreamRefFastaName $upstreamFastaName >/dev/null 2>/dev/null");
				### Check alignment quality of upstream sequence to determine orthology
				my $avidQualityFileName = "$tmpDir/$refGenome.$locus.up_" . "$locus.$curGenome.$curPutativeOrtholog.up";
				if(-e "$avidQualityFileName.info") {
					open (my $avidQualityFile, "grep Score " . $avidQualityFileName . ".info |");
					my $qualityLine = <$avidQualityFile>;
					my @qualityArray = split ' ', $qualityLine;
					$avidQuality =  $qualityArray[3];
					close ($avidQualityFile);
					# Now remove the temporary AVID alignment files
					unlink ("$avidQualityFileName.info");
					unlink ("$avidQualityFileName.minfo");
					unlink ("$avidQualityFileName.out");
				} else {
 					print (localtime() . " WARNING: Cannot open quality file $avidQualityFileName.info for locus $locus.\n");
					$avidQuality = -99;
				}

			

				#############################################################
				if($avidQuality > $curMinQuality) {
					
					my $MAFDownFileName = "$locus.$curPutativeOrtholog.down.maf";
					system("lastz --format=maf $lastzParameters $downstreamRefFastaName $downstreamFastaName > $MAFDownFileName");
					my $downQuality = getMAFQuality($MAFDownFileName);
	
					if($verbose) { print "PROGRESS: Found possible ortholog ($curGenome:$curPutativeOrtholog). Quality: $upQuality.\n"; }
					if(not defined $orthologs{$curSpecies}) {
						$orthologs{$curSpecies} = [ {
							'Name' => $curPutativeOrtholog,
							'Genome' => $curGenome,
							'upstreamFileName' => $upstreamFastaName,
							'downstreamFileName' => $downstreamFastaName,
							'MAFUpFileName' => $MAFUpFileName,
							'MAFDownFileName' => $MAFDownFileName,
							'UpQuality' => $upQuality,
							'DownQuality' => $downQuality} ];		
					} else {
						push( @{ $orthologs{$curSpecies} },
							{
								'Name' => $curPutativeOrtholog,
								'Genome' => $curGenome,
								'upstreamFileName' => $upstreamFastaName,
								'downstreamFileName' => $downstreamFastaName,
								'MAFUpFileName' => $MAFUpFileName,
								'MAFDownFileName' => $MAFDownFileName,
								'UpQuality' => $upQuality,
								'DownQuality' => $downQuality});
					}
				} else {
					if($verbose) { print "PROGRESS: Rejected possible ortholog ($curGenome:$curPutativeOrtholog). Quality: $avidQuality.\n"; }
					unlink($MAFUpFileName);
					unlink($upstreamFastaName);
					unlink($downstreamFastaName);
				}
			}
		}
		
		close($orthologFile);
		}
  }
  close ($genomeDatabase);				

#####################################################################################################
###### Now we have assembled the list of putative orthologs. Select the best genome for each species

foreach my $curOrthSpecies (keys %orthologs) {
		# first, check if we have a consistent duplication. if not, pick the best alignment.
		# For consistent duplication it means that the number of genes is a multiple of the number of species.
		# if so, pick the best duplication group
		my @genomeNames;
		my @qScores;
		foreach my $curOrth (@{ $orthologs{$curOrthSpecies} }) {	
			my %derefCurOrth = %$curOrth; 
			push @genomeNames,  $derefCurOrth{'Genome'};		
			push @qScores, $derefCurOrth{'UpQuality'};
		}
		
		if( (scalar @{ $orthologs{$curOrthSpecies} }) % ( scalar uniq ( @genomeNames )) == 0 &&
			(scalar @{ $orthologs{$curOrthSpecies} }) / (scalar uniq ( @genomeNames )) > 1 ) {

			my @bestOrthologsGroup;
			my $bestQuality =0;
			my @genomesToTest = uniq ( @genomeNames );
			foreach my $curGenomeToTest ( @genomesToTest) {
				my @indexes = grep { @genomeNames[$_] eq $curGenomeToTest } 0 ..(scalar @genomeNames);
			
				my $meanQuality = mean ( @qScores[@indexes] );
				if($meanQuality > $bestQuality) {
					$bestQuality = $meanQuality;
					@bestOrthologsGroup = @indexes;
				}
			}
			
			### Remove all temporary files
			foreach my $i (0..((scalar @qScores)-1)) {
				if( !($i ~~ @bestOrthologsGroup)) {
					if(!$keep_tmp) {
						unlink($orthologs{$curOrthSpecies}[$i]->{'upstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'downstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFUpFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFDownFileName'});
					}
				}
			}
			my %tmporth = %orthologs;
			$orthologs{$curOrthSpecies} = [ ];
			foreach my $i (@bestOrthologsGroup) {
				push( @ { $orthologs{$curOrthSpecies} },
					$tmporth{$curOrthSpecies}[$i]);
			}
			if($verbose) { print "PROGRESS: Picked ortholog genome " . $orthologs{$curOrthSpecies}[0]->{'Genome'} . ", " . (scalar @{ $orthologs{$curOrthSpecies} }) . " Genes:";
					       foreach my $i ( @{ $orthologs{$curOrthSpecies} }) { print $i->{'Name'} . ","; }
					       print ".\n";
			}

		} else {
			#### Only one possible gene. pick the best genome based on alignment quality scores.

			my $topQuality = max( @qScores);
			my $topQualityIdx = firstidx { $_ == $topQuality } @qScores;

			### Remove all temporary files
			foreach my $i (0..((scalar @qScores)-1)) {
				if($i != $topQualityIdx) {
					if(!$keep_tmp) {
						unlink($orthologs{$curOrthSpecies}[$i]->{'upstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'downstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFUpFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFDownFileName'});
					}
				}
			}
			
			## Now remove all the other genes
			$orthologs{$curOrthSpecies} = [ $orthologs{$curOrthSpecies}[$topQualityIdx] ];
			if($verbose) { print "PROGRESS: Picked ortholog genome " . $orthologs{$curOrthSpecies}[0]->{'Genome'} . ",Gene " . $orthologs{$curOrthSpecies}[0]->{'Name'} . "\n"; }
		}
}
####################################################################################################################################
##### At this point, we have selected our "orthologs" (%orthologs) and have all the filtered upstream and downstream sequences in fasta files 
##### Perform alignments to the reference genome
my @species = keys %orthologs;
my $numOfSpecies = scalar @species;

if ($verbose) { print "PROGRESS: Done with ortholog selection. Collected $numOfSpecies Orthologs.\n"; }

if ($numOfSpecies > $MIN_ALIGNMENTS) {
	if($dump_bam) {
		foreach my $speciesToAlign (@species) {
			foreach my $orthologToAlign (@{ $orthologs{$speciesToAlign} }) {
				my $convertParameters = "--conservatoryDirectory $conservatoryDir --genome $refGenome --format SAM";
				system("lastz --format=sam $lastzParameters $upstreamRefFastaName " . $orthologToAlign->{'upstreamFileName'} . " | $conservatoryDir/scripts/convertRelative2absCoordinate $convertParameters --relPos UP >>" .
					$locus . ".sam");
				system("lastz --format=sam $lastzParameters $downstreamRefFastaName " . $orthologToAlign->{'downstreamFileName'} . " | $conservatoryDir/scripts/convertRelative2absCoordinate $convertParameters --relPos DOWN >>" .
					$locus . ".sam");
			}
		}
	}
	#### Now all alignments were performed. Begin to combine MAF by multiz. 
	### First, move everything to an array
	my @orthologsToProcess;
	foreach my $speciesToAlign (@species) {
		foreach my $curOrtholog (@{ $orthologs{$speciesToAlign} }) {
			if($curOrtholog->{'UpQuality'} > $EMPTY_FILE || $curOrtholog->{'DownQuality'} > $EMPTY_FILE) {
				push @orthologsToProcess, $curOrtholog;
			}
		}
	}
	if((scalar @orthologsToProcess) > 0) {
		my @orthologsToProcessSorted = reverse sort { $a->{'UpQuality'} <=> $b->{'UpQuality'} } @orthologsToProcess;

		my $finalMafUpFileName = "$locus.up.maf";
		my $finalMafDownFileName = "$locus.down.maf";
		my $unfilMafUpFileName = "$locus.up.unfil.maf";
		my $unfilMafDownFileName = "$locus.down.unfil.maf";

		system("multiz " . $orthologsToProcessSorted[0]->{'MAFUpFileName'} . " " . $orthologsToProcessSorted[0]->{'MAFUpFileName'} . " 1 | uniq >$unfilMafUpFileName");
		system("multiz " . $orthologsToProcessSorted[0]->{'MAFDownFileName'} . " " . $orthologsToProcessSorted[0]->{'MAFDownFileName'} . " 1 | uniq >$unfilMafDownFileName");

		foreach my $curOrthologToMultiz (@orthologsToProcessSorted) {
			
			if($curOrthologToMultiz->{'UpQuality'} > $EMPTY_FILE) {
				system("multiz $unfilMafUpFileName " . $curOrthologToMultiz->{'MAFUpFileName'} . " 1 | uniq >$unfilMafUpFileName.tmp");
				unlink($unfilMafUpFileName);
				system("mv $unfilMafUpFileName.tmp $unfilMafUpFileName");
			}
			if($curOrthologToMultiz->{'DownQuality'} > $EMPTY_FILE) {
				system("multiz $unfilMafDownFileName " . $curOrthologToMultiz->{'MAFDownFileName'} . " 1 | uniq >$unfilMafDownFileName.tmp");
				unlink($unfilMafDownFileName);
				system("mv $unfilMafDownFileName.tmp $unfilMafDownFileName");
			}
			if($verbose) { print "PROGRESS: Adding " . $curOrthologToMultiz->{'Name'} . " to MAF file $unfilMafUpFileName quality (" . getMAFQuality($unfilMafUpFileName) .")\n"; } 

		}

		### Wrap up. Filter and clean up MAF file
		my $mafFilterCmd = "maf.filter=Merge(species=($locus), dist_max=2),WindowSplit(preferred_size=30),EntropyFilter(species=($locus), window.size=5),RemoveEmptySequences(),MinBlockLength(min_length=$minCNSLength),MinBlockSize(min_size=$MIN_ALIGNMENTS),Merge(species=($locus),dist_max=0)";

		my $command= "$maffilterDir/maffilter \"input.file=$unfilMafUpFileName\" \"$mafFilterCmd,Output(file=$finalMafUpFileName.fil,compression=none)\" >/dev/null 2>/dev/null";

		system ($command);
		if(!$keep_tmp) { unlink($unfilMafUpFileName); }
		###  Remove the .c1 we added for maffilter and restore the underscores to periods (which maffilter does not like).
		system("$conservatoryDir/scripts/fixMAF $locus < $finalMafUpFileName.fil | sed 's/\\.c1//' | sed 's/_/\./g' > $finalMafUpFileName");
		unlink("$finalMafUpFileName.fil");
		$command= "$maffilterDir/maffilter \"input.file=$unfilMafDownFileName\" \"$mafFilterCmd,Output(file=$finalMafDownFileName.fil,compression=none)\" >/dev/null 2>/dev/null";
		system ($command);
		if(!$keep_tmp) { unlink($unfilMafDownFileName); }
		system("$conservatoryDir/scripts/fixMAF $locus < $finalMafDownFileName.fil | sed 's/\\.c1//' | sed 's/_/\./g'  > $finalMafDownFileName");
		unlink("$finalMafDownFileName.fil");

		####### Move final files to output directories
		if( (-s $finalMafUpFileName) > $EMPTY_FILE) {
			system("cp $finalMafUpFileName $outputDir");	
		}
		if( (-s $finalMafDownFileName) > $EMPTY_FILE) {
			system("cp $finalMafDownFileName $outputDir");
		}
		unlink($finalMafDownFileName);
		unlink($finalMafUpFileName);
	}
} else { if($verbose) { print localtime() . " PROGRESS: Number of species with alignments ($numOfSpecies) below minimum ($MIN_ALIGNMENTS)."; }} 

### Fix SAM (if we have one) and move to output
if($dump_bam && $numOfSpecies > $MIN_ALIGNMENTS) {
	system("mv $locus.sam $locus.sam.tmp");
	system("grep \"@\" $locus.sam.tmp | sort | uniq >$locus.sam");
	system("grep -v \"@\" $locus.sam.tmp | sort -k3,3 -k4,4n | uniq >>$locus.sam");
	unlink("$locus.sam.tmp");
	system("samtools view -b $locus.sam > $locus.bam");
	unlink("$locus.sam");
	system("mv $locus.bam $outputDir");
}

### Remove temporary files
if(!$keep_tmp) {
	unlink($upstreamRefFastaName);
	unlink($downstreamRefFastaName);
	## remove all of the fasta and maf files
	foreach my $speciesToAlign (@species) {
		foreach my $orthologToAlign (@{ $orthologs{$speciesToAlign} }) {
			unlink($orthologToAlign->{'upstreamFileName'});
			unlink($orthologToAlign->{'downstreamFileName'});
			
			unlink("$tmpDir/$locus" . "." . $orthologToAlign->{'Name'} . ".up.maf");
			unlink("$tmpDir/$locus" . "." . $orthologToAlign->{'Name'} . ".down.maf");
		}
		
	}
}
if($verbose) { if(-e "$outputDir/$locus.up.maf") { my $finalQuality = getMAFQuality("$outputDir/$locus.up.maf"); print "PROGRESS: Done alignment for $locus. Quality $finalQuality.\n"; } }

} else { print localtime() . " SKIP: Alignment files for $locus already exists. Use --force remake.\n"; }

######## Now do phyloP.
my $treeFileName = "$conservatoryDir/genomes/$family.mod";

### Make sure we have the tree information. If not, just say so and skip

if(-e $treeFileName && !$skipConservation) {
	# First, convert from a gene MAF to a species MAF
	if($verbose) { print "PROGRESS: Begin conservation analysis for $locus.\n"; }
	if (! -e $outputCNSDir) { mkdir($outputCNSDir); }

	my $geneMAFFileName_up = "$outputDir/$locus.up.maf";
	my $geneMAFFileName_down = "$outputDir/$locus.down.maf";
	my $speciesMAFFileName_up = "$tmpDir/$locus.up.sp.maf";
	my $speciesMAFFileName_down = "$tmpDir/$locus.down.sp.maf";

	open(my $geneMAF_up, "<", $geneMAFFileName_up);
	open(my $speciesMAF_up, ">", $speciesMAFFileName_up);
	while(<$geneMAF_up>) {
		my $mafline = geneToSpecies($_);
		print $speciesMAF_up $mafline;
	}
	close($geneMAF_up);
	close($speciesMAF_up);
	if($verbose) { printf (localtime() . ": PROGRESS: Converted MAF upstream file. Size %d.\n", -s $speciesMAFFileName_up); }
	open(my $geneMAF_down, "<", $geneMAFFileName_down);
	open(my $speciesMAF_down, ">", $speciesMAFFileName_down);
	while(<$geneMAF_down>) {
		my $mafline = geneToSpecies($_);
		print $speciesMAF_down $mafline;
	}
	close($geneMAF_down);
	close($speciesMAF_down);
	if($verbose) { printf (localtime() . ": PROGRESS: Converted MAF downstream file. Size %d.\n", -s $speciesMAFFileName_down); }
	
	### Extract the absolute coordinates of the locus
	my $refFootprintFileName = "$conservatoryDir/genomes/$family/$refGenome.footprint.gff3";
	my ($refGeneStart, $refGeneEnd, $refGeneChr, $refGeneDir) = ("","","","");
	
	open (my $refFootprintFile, "<", $refFootprintFileName);
	while ((my $line = <$refFootprintFile>) && $refGeneChr eq "" ){
		chomp($line);
		my @array = split /\t/, $line;
		my %fields = split /[;=]/, $array[8];
		
		if($fields{'Name'} eq $locus) {
			$refGeneChr = $array[0];
			$refGeneStart = $array[3];	
			$refGeneEnd = $array[4];
			$refGeneDir= $array[6];
		}
	}
	close($refFootprintFile);
	if($verbose) { print localtime() . ": PROGRESS: Extracted genome coordinates $locus:$refGeneChr:$refGeneStart:$refGeneEnd.\n"; }

	my $coordinateTranslateAwkUp;
	my $coordinateTranslateStrUp;
	my $coordinateTranslateAwkDown;
	my $coordinateTranslateStrDown;

	if($refGeneDir eq "+") {
		$coordinateTranslateAwkUp = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneStart-$upstreamLength+\$2,$refGeneStart-$upstreamLength+\$3,\$5);}}'";
		$coordinateTranslateStrUp = " \"$refGeneChr\", $refGeneStart-$upstreamLength+\$2, $refGeneStart-$upstreamLength+\$3";
		$coordinateTranslateAwkDown = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneEnd+\$2,$refGeneEnd+\$3,\$5);}}'"; 
		$coordinateTranslateStrDown = " \"$refGeneChr\", $refGeneEnd+\$2, $refGeneEnd+\$3";		
	} else { 
		$coordinateTranslateAwkUp = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneEnd+$upstreamLength-\$3,$refGeneEnd+$upstreamLength-\$2,\$5);}}'";
		$coordinateTranslateStrUp = " \"$refGeneChr\", $refGeneEnd+$upstreamLength-\$3, $refGeneEnd+$upstreamLength-\$2";
		$coordinateTranslateAwkDown = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneStart-\$3,$refGeneStart-\$2,\$5);}}'";
		$coordinateTranslateStrDown = "\"$refGeneChr\",$refGeneStart-\$3,$refGeneStart-\$2";
	}
	
	#### Now run phyloP 
	my $phyloPParameters = "--seed 123 --wig-scores --no-prune --method SCORE --mode CON";
	
	if(-s $speciesMAFFileName_up > $EMPTY_FILE) {
		if($verbose) { print localtime() . ": PROGRESS: START phyloP analysis for upstream CNS.\n"; }
		
		system("phyloP $phyloPParameters $treeFileName $speciesMAFFileName_up | wig2bed | sort -k1,1 -k2,2n > $tmpDir/$locus.up.bed");

		if(-s "$tmpDir/$locus.up.bed"> $EMPTY_FILE) { 
			system("awk '{ if(\$5>$minPhyloPscore) {print;}}' $tmpDir/$locus.up.bed > $tmpDir/$locus.up.fil.bed");
			if(-s "$tmpDir/$locus.up.fil.bed" > $EMPTY_FILE) {
				if($verbose) { print localtime() . ": Found upstream CNS.\n"; }
				system("bedtools merge -d 25 -c 5 -o mean -i $tmpDir/$locus.up.fil.bed | awk 'BEGIN{OFS=\",\"}{ if( (\$3 - \$2)>=$minCNSLength) print(\$1, \$2-$upstreamLength, \$3-$upstreamLength, \$4,\"UP\",$coordinateTranslateStrUp); }' > $tmpDir/$locus.cns.csv");
			}
			if(!$keep_tmp) {unlink("$tmpDir/$locus.up.fil.bed"); }
		}
	}
	if(-s $speciesMAFFileName_down > $EMPTY_FILE) {
		system("phyloP $phyloPParameters $treeFileName $speciesMAFFileName_down | wig2bed | sort -k1,1 -k2,2n > $tmpDir/$locus.down.bed");
		if(-s "$tmpDir/$locus.down.bed"> $EMPTY_FILE) { 
			system("awk '{ if(\$5>$minPhyloPscore) {print;}}' $tmpDir/$locus.down.bed > $tmpDir/$locus.down.fil.bed");
			if(-s "$tmpDir/$locus.down.fil.bed" > $EMPTY_FILE) {
				if($verbose) { print localtime() . ": Found downstream CNS.\n"; }
				system("bedtools merge -d 25 -c 5 -o mean -i $tmpDir/$locus.down.fil.bed | awk 'BEGIN{OFS=\",\"}{ if( (\$3 - \$2)>=$minCNSLength) print(\$1, \$2, \$3, \$4 ,\"DOWN\",$coordinateTranslateStrDown); }' >> $tmpDir/$locus.cns.csv");
			}
			if(!$keep_tmp) {unlink("$tmpDir/$locus.down.fil.bed"); }
		}
	}
	if(!$keep_tmp) { unlink($speciesMAFFileName_down); }
	if(!$keep_tmp) { unlink($speciesMAFFileName_up); }
	
	### Build CNS and convert to table
	if( (-e "$tmpDir/$locus.cns.csv") && (-s "$tmpDir/$locus.cns.csv" > $EMPTY_FILE)) {
		system("cp $tmpDir/$locus.cns.csv $outputCNSDir");
		if(!$keep_tmp) {unlink("$tmpDir/$locus.cns.csv");}
	}

	### Now convert coordinates and dump a BEDGRAPH file for merging

	if(-e "$tmpDir/$locus.up.bed") {
		system("$coordinateTranslateAwkUp $tmpDir/$locus.up.bed > $tmpDir/$locus.phylop.bed");
	}
	if(-e "$tmpDir/$locus.down.bed") {
		system("$coordinateTranslateAwkDown $tmpDir/$locus.down.bed >> $tmpDir/$locus.phylop.bed");
	}

	if(!$keep_tmp) { unlink("$tmpDir/$locus.up.bed"); }
	if(!$keep_tmp) { unlink("$tmpDir/$locus.down.bed"); }

	if( (-e "$tmpDir/$locus.phylop.bed") && ( (-s "$tmpDir/$locus.phylop.bed") > $EMPTY_FILE) ) {
		system("cp $tmpDir/$locus.phylop.bed $outputCNSDir");
	}
	unlink("$tmpDir/$locus.phylop.bed");
} else { print "WARNING : Skipping phyloP analysis...\n"; }

if($verbose) { print localtime() . ": PROGRESS: End conservation analysis for $locus.\n"; }
#### Go back to the original directory, and we are done!
chdir $curDir;	

################################################################################
###### utility functions #######################################################
sub mean {
    return sum(@_)/@_;
}

sub extractFastaToFile {
	(my $fastaFile, my $locus, my $outputFastaFile) = @_;
	
	my $maskseq = " sed -r 's/[A|T]{10}/XXXXXXXXXX/g' | sed 's/NNN/XXX/g'";
	my $removeDot ="sed 's/\\./_/g'";  ### MAFfilter does not like dots in gene names
	my $addc1 = "awk '{if(NR==1) {print(\$0\".c1\"); } else {print \$0;}}'";
	
	system("samtools faidx $fastaFile $locus | $maskseq | $removeDot | $addc1 >$outputFastaFile");
}

sub getMAFQuality {
	my ($MAFFileName) = @_;

	open (my $m, $MAFFileName);
	my $maf = Bio::AlignIO->new(-fh => $m, -format => 'maf');
	my $quality =0;
	while(my $aln = $maf->next_aln()) {
		$quality = $quality + $aln->score;
	}
	close($m);
	return $quality;
}

# convert gene name to species name in input MAF line
sub geneToSpecies {
	my ($inline) = @_;
	if(substr($inline,0,1) eq "s") {
		my $editedLine;
		my ($type, $geneName) = split ' ',$inline;
		chomp($geneName);
		open(my $genomeDatabase, "<" , $genomedbFile);
		my $header= <$genomeDatabase>;
		while(<$genomeDatabase>) {
			chomp;
			my @array = split /,/;
			my $speciesName= $array[1];
			my $geneToSpecies= $array[7] . "[a-zA-Z0-9\._]*";
			my $editedLine = $inline;
			if($array[7] ne "") {
				eval '$editedLine =~ s/ $geneToSpecies/ $speciesName/g';
				$inline = $editedLine;
			}
		}
		close($genomeDatabase);
	}
	return $inline;
}