#!/usr/bin/perl

use POSIX;
use strict;
use Text::CSV;
use Data::Dumper qw(Dumper);
use List::Util qw(min max sum);
use List::MoreUtils qw(uniq firstidx);
use Bio::AlignIO;
use Cwd;
use Cwd 'abs_path';
use Getopt::Long;
use experimental 'smartmatch';


################################################################################
######### Setup

my $conservatoryDir=abs_path(".");
my $curDir;
my $locus;
my $family;
my $minAlignments = 4; # The minimum number of aligned promoters that is required to generate a MAF file
my $EMPTY_FILE = 0; # The size of an empty MAF file, containing no alignments
my $minIdentity= 60;
my $minQuality = 1000;
my $minCNSLength=6;
my $keep_tmp = 0;
my $verbose = 0;
my $force=0;
my $dump_bam = 1;
my $help = 0;
my $skipAlignment=0;
my $skipConservation=0;
my $minPhyloPscore=1.5;
my $noFlagORF=0;
my $minORFLength="auto";
my $onlyOneOrtholog=0;
my $minHSPthreshold=2000;
my $orthologSelectionStrategy = "bestmean";

########### Reg Seq lengths
my $upstreamLength;
my $downstreamLength;

my $upstreamLengthReference;
my $downstreamLengthReference;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"locus=s" => \$locus,
			"family=s" => \$family,
			"min-identity=i" => \$minIdentity,
			"min-align-threshold=i" => \$minHSPthreshold,			
			"min-species=i" => \$minAlignments,
			"min-phylop-score=f" => \$minPhyloPscore,
			"no-orf-flag" => \$noFlagORF,
			"min-orf-length=i" => \$minORFLength,
			"only-one-ortholog" => \$onlyOneOrtholog,
			"ortholog-selection-strategy" => \$orthologSelectionStrategy,
			"force" => \$force,
			"keep-tmp" => \$keep_tmp,
			"verbose" => \$verbose,
			"skip-alignment" => \$skipAlignment,
			"skip-conservation" => \$skipConservation,
			"help" => \$help) or die ("Error in command line arguments\n");
			

if( $locus eq "" or $family eq "" or $help or !($orthologSelectionStrategy eq "bestmean" or $orthologSelectionStrategy eq "bestsum" ) ) {
	print "Conservatory version 0.0.1\n\n";
	if($locus eq "" or $family eq "") {
		print "\n\nMissing parameter: must supply both family and locus.\n\n";
	}
	if (!($orthologSelectionStrategy eq "bestmean" or $orthologSelectionStrategy eq "bestsum")) {
		print "\n\nBad parameter: ortholog-selection-strategy can be either bestsum or bestmean.\n\n";
	}

   print "buildAlignmentForFamily --family <familyName> --locus <Locus>\n\n\n";
   print "\t--family\tFamily name (REQUIRED).\n";
   print "\t--locus\t\t\tLocus in the reference genome for the family (REQUIRED).\n";
   print "\t--conservatoryDirectory\t\tPath of the main conservatory directory.\n";
   print "\n\t\tAlignment options\n\n";
   print "\t--min-identity\t\tMinimum identity for LASTZ alignments. Default is 60. Use lower number if species are more distant.\n";
   print "\t--min-align-threshold\t\tMimimum hsp threshold for LASTZ alignments. Default is 2000 (lower threshold will identify smaller conserved sequences but alignments will be less reliable).\n";
   print "\t--ortholog-selection-strategy\t\tMethod to select the best set of CRE orthologs for a genomes. Can be bestmean (default) or bestsum. Bestmean will prefer better alignments, Bestsum, more possible orthologs.\n";
   print "\t--min-species\t\tMinimum number of species share sequence for an alignment to be considered for CNS (default: 4).\n";
   print "\t--min-phylop-score\t\tMinimum phyloP score to consider as significant CNS (default: 1.5).\n";
   print "\t--no-orf-flag\t\tSkip flagging of ORF in CNS.\n";
   print "\t--min-orf-length\t\tMinimum length (in bp) of ORF to identify in CNS. Deafult is \"auto\" which is automatically calculated based on expected random ORF occurance in data.\n";
   print "\t--only-one-ortholog\t\tIf multiple putative orthologs found, use only the one with best CRE alignment (default: use all).\n";
   print "\t--skip-alignment\t\tJust do phyloP calculations. Do not perform alignments.\n";
   print "\t--skip-conservation\t\tDo not compute phyloP scores.\n";
   print "\t--keep-tmp\t\tDo not delete all the temporary files produced in the TMP directory.\n";
 
   print "\n\t\tGeneral options\n\n";
   print "\t--force\t\tRecompute alignments and CNS even if files exist.\n";
   print "\t--verbose\t\tOutput extra messages.\n";
   print "\t--help\t\t\tPrints this message.\n\n";
   
   exit();
}


### Set up directory and file access
my $genomedbFile = $conservatoryDir . "/genome_database.csv";
my $outputDir = "$conservatoryDir/alignments/$family/";
my $outputCNSDir = "$conservatoryDir/CNS/$family/";
my $tmpDir = "$conservatoryDir/alignments/$family/tmp";
my $genomeDir ="$conservatoryDir/genomes/$family";
my $lastzParameters = "--gap=200,100 --nochain --recoverseeds --noytrim --seed=match4 --gapped --strand=both --step=1 --ambiguous=iupac --identity=$minIdentity --ydrop=1000 --hspthreshold=$minHSPthreshold --gappedthresh=2500";


####### First, sanity checks. Check to see if directory structure is OK and if programs are installed
####### 
die "ERROR: Cannot find file genome database file ($genomedbFile)\n" unless -e $genomedbFile;
die "ERROR: Conservatory directory structure at ($conservatoryDir) is corrupt\n" unless (-e "$conservatoryDir/genomes/$family" && -e "$conservatoryDir/genomes/blastdb/" && -e "$conservatoryDir/scripts" && -e "$conservatoryDir/alignments");

my $t_lastz = `sh -c 'command -v lastz'`;
die "ERROR: Cannot find lastz in path. Please make sure it is installed.\n" unless ($t_lastz ne ""); 

my $t_samtools = `sh -c 'command -v samtools'`;
die "ERROR: Cannot find samtools in path. Please make sure it is installed.\n" unless ($t_samtools ne "");  

my $t_phyloP = `sh -c 'command -v phyloP'`;
die "ERROR: Cannot find phyloP in path. Please make sure phast is installed.\n" unless ($t_phyloP ne "");  

die "ERROR: Cannot find the ORFfinder executable utility at $conservatoryDir/scripts.\n" unless (-x "$conservatoryDir/scripts");

###############################################
##### Now set things up
##### Find out what is our reference genome
my $refGenome="";
open (my $genomeDatabase, "<", $genomedbFile);
my $header = <$genomeDatabase>;
while((my $curgenomeline = <$genomeDatabase>) && $refGenome eq "") {
	my ($curgenomeName, $curgenomeSpecies,  $curgenomeFamily, $curgenomeReference, $upstreamLength, $downstreamLength, $geneNameField, $geneProcessingRegEx, $gene2SpeciesIdentifier, $proteinProcessingRegEx) = split /,/, $curgenomeline;
	if($curgenomeFamily eq $family && $curgenomeName eq $curgenomeReference) {
		$refGenome = $curgenomeReference;
		$upstreamLengthReference = $upstreamLength  * 1000;
		$downstreamLengthReference = $downstreamLength * 1000;
	}
}
seek ($genomeDatabase,0,SEEK_SET);
die "ERROR: Cannot find family ($family) or the reference genome for the family in the genome database file.\n" unless $refGenome ne "";
	
####### now make sure our directories exist
if (! -e $outputDir) { mkdir($outputDir); }
if (! -e $tmpDir) { mkdir($tmpDir); }
#remember where we are
$curDir = getcwd;
chdir $tmpDir;

 
### Mow check if alignment is already there
if((!(-e "$outputDir/$locus.up.fasta" && -e "$outputDir/$locus.down.fasta") || $force ) && ! $skipAlignment) {
  ####### Set up the reference fasta files
  my $upstreamRefFastaName = "$tmpDir/$refGenome.$locus.up.fasta";
  my $downstreamRefFastaName = "$tmpDir/$refGenome.$locus.down.fasta";

  extractFastaToFile("$genomeDir/$refGenome" . ".upstream.fasta.gz", $locus, $upstreamRefFastaName);
  extractFastaToFile("$genomeDir/$refGenome" . ".downstream.fasta.gz", $locus, $downstreamRefFastaName);
  if($verbose) { print localtime() . ": Done extracting reference sequences.\n";}

 	
  # set up CRE-orthology hashes
  my %orthologs;
  ##############################################################################
  # Load Genomes
  $header = <$genomeDatabase>;

  while(<$genomeDatabase>) {
	chomp;
	my ($curgenomeName, $curgenomeSpecies,  $curgenomeFamily, $curgenomeReference, $upstreamLength, $downstreamLength, $geneNameField, $geneProcessingRegEx, $gene2SpeciesIdentifier, $proteinProcessingRegEx) = split /,/;

	if($curgenomeName ne $refGenome && $curgenomeFamily eq $family) { #if this is within our family (and not the reference)
		### get ortholog sequences
		open (my $orthologFile, "<", "$genomeDir/$curgenomeName.orthologs.csv") || die "ERROR: Can't open ortholog file $genomeDir/$curgenomeName.orthologs.csv.\n";
		while(my $orth_line = <$orthologFile>) {
			chomp($orth_line);
			(my $curPutativeOrtholog, my $curRefLocus, my $score) = split /,/,$orth_line;
			if($curRefLocus eq $locus) {
				my $upstreamFastaName ="$tmpDir/$locus.$curgenomeName.$curPutativeOrtholog.up.fasta";
				my $downstreamFastaName = "$tmpDir/$locus.$curgenomeName.$curPutativeOrtholog.down.fasta";
				extractFastaToFile("$genomeDir/$curgenomeName.upstream.fasta.gz", $curPutativeOrtholog, $upstreamFastaName);
				extractFastaToFile("$genomeDir/$curgenomeName.downstream.fasta.gz", $curPutativeOrtholog, $downstreamFastaName);

				my $MAFUpFileName = "$locus.$curPutativeOrtholog.up.maf";
				system("lastz --format=maf $lastzParameters $upstreamRefFastaName $upstreamFastaName > $MAFUpFileName");
				my $upQuality = getMAFQuality($MAFUpFileName);

				#############################################################
				if($upQuality > $minQuality) {
					
					my $MAFDownFileName = "$locus.$curPutativeOrtholog.down.maf";
					system("lastz --format=maf $lastzParameters $downstreamRefFastaName $downstreamFastaName > $MAFDownFileName");
					my $downQuality = getMAFQuality($MAFDownFileName);
	
					if($verbose) { print "PROGRESS: Found possible CRE-ortholog ($curgenomeName:$curPutativeOrtholog). Quality: $upQuality.\n"; }
					if(not defined $orthologs{$curgenomeSpecies}) {
						$orthologs{$curgenomeSpecies} = [ {
							'Name' => $curPutativeOrtholog,
							'Genome' => $curgenomeName,
							'upstreamLength' => $upstreamLength *1000,
							'downstreamLength' => $downstreamLength *1000,
							'upstreamFileName' => $upstreamFastaName,
							'downstreamFileName' => $downstreamFastaName,
							'MAFUpFileName' => $MAFUpFileName,
							'MAFDownFileName' => $MAFDownFileName,
							'UpQuality' => $upQuality,
							'DownQuality' => $downQuality} ];		
					} else {
						push( @{ $orthologs{$curgenomeSpecies} },
							{
								'Name' => $curPutativeOrtholog,
								'Genome' => $curgenomeName,
								'upstreamLength' => $upstreamLength *1000,
								'downstreamLength' => $downstreamLength *1000,
								'upstreamFileName' => $upstreamFastaName,
								'downstreamFileName' => $downstreamFastaName,
								'MAFUpFileName' => $MAFUpFileName,
								'MAFDownFileName' => $MAFDownFileName,
								'UpQuality' => $upQuality,
								'DownQuality' => $downQuality});
					}
				} else {
					if($verbose) { print "PROGRESS: Rejected CRE-ortholog ($curgenomeName:$curPutativeOrtholog). Quality: $upQuality.\n"; }
					unlink($MAFUpFileName);
					unlink($upstreamFastaName);
					unlink($downstreamFastaName);
				}
			}
		}
		
		close($orthologFile);
		}
  }
  close ($genomeDatabase);				

#####################################################################################################
###### Now we have assembled the list of putative CRE orthologs. Select the best genome for each species

foreach my $curOrthSpecies (keys %orthologs) {
		# first, check if we have a consistent duplication. if not, pick the best alignment.
		# For consistent duplication it means that the number of genes is a multiple of the number of species.
		# if so, pick the best duplication group
		my @genomeNames;
		my @qScores;
		foreach my $curOrth (@{ $orthologs{$curOrthSpecies} }) {	
			my %derefCurOrth = %$curOrth; 
			push @genomeNames,  $derefCurOrth{'Genome'};		
			push @qScores, $derefCurOrth{'UpQuality'};
		}
		
		if( (scalar @{ $orthologs{$curOrthSpecies} }) / (scalar uniq ( @genomeNames )) > 1 &&
			!$onlyOneOrtholog ) {

			my @bestOrthologsGroup;
			my $bestQuality =0;
			my @genomesToTest = uniq ( @genomeNames );
			foreach my $curGenomeToTest ( @genomesToTest) {
				my @indexes = grep { @genomeNames[$_] eq $curGenomeToTest } 0 ..(scalar @genomeNames);
				
				my $meanQuality;
				if($orthologSelectionStrategy eq "bestmean") {
					$meanQuality = mean ( @qScores[@indexes] );
				} else {
					$meanQuality = sum ( @qScores[@indexes] );
				}
				if($meanQuality > $bestQuality) {
					$bestQuality = $meanQuality;
					@bestOrthologsGroup = @indexes;
				}
			}
			
			### Remove all temporary files
			foreach my $i (0..((scalar @qScores)-1)) {
				if( !($i ~~ @bestOrthologsGroup)) {
					if(!$keep_tmp) {
						unlink($orthologs{$curOrthSpecies}[$i]->{'upstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'downstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFUpFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFDownFileName'});
					}
				}
			}
			my %tmporth = %orthologs;
			$orthologs{$curOrthSpecies} = [ ];
			foreach my $i (@bestOrthologsGroup) {
				push( @ { $orthologs{$curOrthSpecies} },
					$tmporth{$curOrthSpecies}[$i]);
			}
			if($verbose) { print "PROGRESS: Picked CRE-ortholog for " . $orthologs{$curOrthSpecies}[0]->{'Genome'} . ".\t" . (scalar @{ $orthologs{$curOrthSpecies} }) . " Genes: ";
					       foreach my $i ( @{ $orthologs{$curOrthSpecies} }) { print $i->{'Name'} . ". "; }
					       print "\n";
			}

		} else {
			#### Only one possible gene. pick the best genome based on alignment quality scores.

			my $topQuality = max( @qScores);
			my $topQualityIdx = firstidx { $_ == $topQuality } @qScores;

			### Remove all temporary files
			foreach my $i (0..((scalar @qScores)-1)) {
				if($i != $topQualityIdx) {
					if(!$keep_tmp) {
						unlink($orthologs{$curOrthSpecies}[$i]->{'upstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'downstreamFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFUpFileName'});
						unlink($orthologs{$curOrthSpecies}[$i]->{'MAFDownFileName'});
					}
				}
			}
			
			## Now remove all the other genes
			$orthologs{$curOrthSpecies} = [ $orthologs{$curOrthSpecies}[$topQualityIdx] ];
			if($verbose) { print "PROGRESS: Picked CRE-ortholog for " . $orthologs{$curOrthSpecies}[0]->{'Genome'} . ".\t1 Gene: " . $orthologs{$curOrthSpecies}[0]->{'Name'} . ".\n"; }
		}
}
####################################################################################################################################
##### At this point, we have selected our "CRE orthologs" (%orthologs) and have all the filtered upstream and downstream sequences in fasta files 
##### Perform alignments to the reference genome
my @species = keys %orthologs;
my $numOfSpecies = scalar @species;

if ($verbose) { print "PROGRESS: Done with CRE-ortholog selection. Collected $numOfSpecies CRE-orthologs.\n"; }

if ($numOfSpecies >= $minAlignments) {
	if($dump_bam) {
		foreach my $speciesToAlign (@species) {
			foreach my $orthologToAlign (@{ $orthologs{$speciesToAlign} }) {
				my $convertParameters = "--conservatoryDirectory $conservatoryDir --genome $refGenome --format SAM --tag $speciesToAlign ";
				system("lastz --format=sam $lastzParameters $upstreamRefFastaName " . $orthologToAlign->{'upstreamFileName'} . " |perl  $conservatoryDir/scripts/convertRelative2absCoordinate $convertParameters --relPos UP >>" .
					$locus . ".sam");
				system("lastz --format=sam $lastzParameters $downstreamRefFastaName " . $orthologToAlign->{'downstreamFileName'} . " | perl $conservatoryDir/scripts/convertRelative2absCoordinate $convertParameters --relPos DOWN >>" .
					$locus . ".sam");
			}
		}
	}
	#### Now all alignments were performed. Begin to combine MAF manually. 
	### First, move everything to an array. Dump a copy to the CRE-ortholog file
	
	my $finalCREorthologFileName = "$outputDir/$locus.CREorthologs.txt";
	open(my $finalCREorthologFile, ">$finalCREorthologFileName");
	
	my @orthologsToProcess;
	foreach my $speciesToAlign (@species) {
		foreach my $curOrtholog (@{ $orthologs{$speciesToAlign} }) {
			if($curOrtholog->{'UpQuality'} > $EMPTY_FILE || $curOrtholog->{'DownQuality'} > $EMPTY_FILE) {
				push @orthologsToProcess, $curOrtholog;
				print $finalCREorthologFile  $curOrtholog->{'Genome'} . "\t" . $curOrtholog->{'Name'} . "\t" . $curOrtholog->{'UpQuality'} . "\t" . $curOrtholog->{'DownQuality'} ."\n"; 
			}
		}
	}
	close($finalCREorthologFile);


	if((scalar @orthologsToProcess) > 0) {
		my @orthologsToProcessSorted = reverse sort { $a->{'UpQuality'} <=> $b->{'UpQuality'} } @orthologsToProcess;
		
		### Load all MAF, collapse species-specific paralogs and convert to FASTA.
		my %fastaUpstreamAlignment;
		my %fastaDownstreamAlignment;
		my @mapAlignments;
		
		foreach my $curOrthologToMultiz (@orthologsToProcessSorted) {
			MAFtoFASTA($family, $curOrthologToMultiz->{'MAFUpFileName'}, $upstreamLengthReference, $curOrthologToMultiz->{'upstreamLength'}, \%fastaUpstreamAlignment, \@mapAlignments, "U");
			MAFtoFASTA($family, $curOrthologToMultiz->{'MAFDownFileName'}, $downstreamLengthReference,$curOrthologToMultiz->{'downstreamLength'}, \%fastaDownstreamAlignment, \@mapAlignments, "D");
		}

		my $finalFASTAUpFileName = "$outputDir/$locus.up.fasta";
		my $finalFASTADownFileName = "$outputDir/$locus.down.fasta";
		
		open (my $finalFASTAUpFile, ">$finalFASTAUpFileName");
		open (my $finalFASTADownFile, ">$finalFASTADownFileName");

		# and Dump fasta alignment
		print $finalFASTAUpFile ">$refGenome\n" . $fastaUpstreamAlignment{$refGenome} . "\n";
		print $finalFASTADownFile ">$refGenome\n" . $fastaDownstreamAlignment{$refGenome} . "\n";

		for my $curspecies (keys %fastaUpstreamAlignment) {
			if($curspecies ne $refGenome) {
				print $finalFASTAUpFile ">$curspecies\n" . $fastaUpstreamAlignment{$curspecies} . "\n";
			}
		}
		for my $curspecies (keys %fastaDownstreamAlignment) {
			if($curspecies ne $refGenome) {
				print $finalFASTADownFile ">$curspecies\n" . $fastaDownstreamAlignment{$curspecies} . "\n";
			}
		}
		close($finalFASTAUpFile);
		close($finalFASTADownFile);
		
		####### Save alignment map to file
		my $finalAlignmentMapFileName = "$outputDir/$locus.map.txt";
		open(my $finalAlignmentMap, ">$finalAlignmentMapFileName");
		foreach (@mapAlignments) { print $finalAlignmentMap $locus . "\t" . $_; }
		close($finalAlignmentMap);
	}
} else { if($verbose) { print "PROGRESS: Not enough CRE-orthologs for alignment ($numOfSpecies, minimum is:$minAlignments). Check --min-species parameter.\n"; }} 

### Fix SAM (if we have one) and move to output
if($dump_bam && $numOfSpecies >= $minAlignments) {
	system("mv $locus.sam $locus.sam.tmp");
	system("grep \"@\" $locus.sam.tmp | sort | uniq >$locus.sam");
	system("grep -v \"@\" $locus.sam.tmp | sort -k3,3 -k4,4n | uniq >>$locus.sam");
	unlink("$locus.sam.tmp");
	system("samtools view -b $locus.sam > $locus.bam");
	unlink("$locus.sam");
	system("mv $locus.bam $outputDir");
}

### Remove temporary files
if(!$keep_tmp) {
	unlink($upstreamRefFastaName);
	unlink($downstreamRefFastaName);
	## remove all of the fasta and maf files
	foreach my $speciesToAlign (@species) {
		foreach my $orthologToAlign (@{ $orthologs{$speciesToAlign} }) {
			unlink($orthologToAlign->{'upstreamFileName'});
			unlink($orthologToAlign->{'downstreamFileName'});
			
			unlink("$tmpDir/$locus" . "." . $orthologToAlign->{'Name'} . ".up.maf");
			unlink("$tmpDir/$locus" . "." . $orthologToAlign->{'Name'} . ".down.maf");
		}
		
	}
}
if($verbose) { if(-e "$outputDir/$locus.up.fasta") { print "PROGRESS: Done alignment for $locus.\n"; } }

} else { print "SKIP: Alignment files for $locus already exists. Use --force remake.\n"; }

######## Now do phyloP.
my $treeFileName = "$conservatoryDir/genomes/$family.mod";

### Make sure we have the tree information. If not, just say so and skip

if(-e $treeFileName && !$skipConservation) {

	
	if($verbose) { print "PROGRESS: Begin conservation analysis for $locus.\n"; }
	if (! -e $outputCNSDir) { mkdir($outputCNSDir); }

	my $finalFASTAUpFileName = "$outputDir/$locus.up.fasta";
	my $finalFASTADownFileName = "$outputDir/$locus.down.fasta";

	
	### Extract the absolute coordinates of the locus
	my $refFootprintFileName = "$conservatoryDir/genomes/$family/$refGenome.footprint.gff3";
	my ($refGeneStart, $refGeneEnd, $refGeneChr, $refGeneDir) = ("","","","");
	
	open (my $refFootprintFile, "<", $refFootprintFileName);
	while ((my $line = <$refFootprintFile>) && $refGeneChr eq "" ){
		chomp($line);
		my @array = split /\t/, $line;
		my %fields = split /[;=]/, $array[8];
		
		if($fields{'Name'} eq $locus) {
			$refGeneChr = $array[0];
			$refGeneStart = $array[3];	
			$refGeneEnd = $array[4];
			$refGeneDir= $array[6];
		}
	}
	close($refFootprintFile);
	if($verbose) { print "PROGRESS: Extracted genome coordinates $locus:$refGeneChr:$refGeneStart:$refGeneEnd. Upsteam sequence $upstreamLengthReference bp. Downstream sequence $downstreamLengthReference bp.\n"; }

	my $coordinateTranslateAwkUp;
	my $coordinateTranslateStrUp;
	my $coordinateTranslateAwkDown;
	my $coordinateTranslateStrDown;

	if($refGeneDir eq "+") {
		$coordinateTranslateAwkUp = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneStart-$upstreamLengthReference-1+\$2,$refGeneStart-$upstreamLengthReference-1+\$3,\$5);}}'";
		$coordinateTranslateStrUp = " \"$refGeneChr\", $refGeneStart- $upstreamLengthReference-1+\$2, $refGeneStart- $upstreamLengthReference-1+\$3";
		$coordinateTranslateAwkDown = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneEnd+\$2,$refGeneEnd+\$3,\$5);}}'"; 
		$coordinateTranslateStrDown = " \"$refGeneChr\", $refGeneEnd+\$2, $refGeneEnd+\$3";		
	} else { 
		$coordinateTranslateAwkUp = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneEnd+ $upstreamLengthReference-\$3,$refGeneEnd+ $upstreamLengthReference-\$2,\$5);}}'";
		$coordinateTranslateStrUp = " \"$refGeneChr\", $refGeneEnd+$upstreamLengthReference+1-\$3, $refGeneEnd+$upstreamLengthReference-\$2";
		$coordinateTranslateAwkDown = "awk '{ if(\$5>$minPhyloPscore) {print(\"$refGeneChr\",$refGeneStart-\$3,$refGeneStart-\$2,\$5);}}'";
		$coordinateTranslateStrDown = "\"$refGeneChr\",$refGeneStart-\$3,$refGeneStart-\$2";
	}
	
	#### Now run phyloP 
	my $phyloPParameters = "--seed 123 --wig-scores --no-prune --method SCORE --mode CON";
	my $flagORFCommand="";
	if(!$noFlagORF) {
		$flagORFCommand="| $conservatoryDir/scripts/flagORFCNS $finalFASTAUpFileName $finalFASTADownFileName $tmpDir $minORFLength";
	}
		
	if(-s $finalFASTAUpFileName > $EMPTY_FILE) {
		if($verbose) { print "PROGRESS: START phyloP analysis for upstream CNS.\n"; }

		system("phyloP $phyloPParameters $treeFileName $finalFASTAUpFileName | wig2bed | sort -k1,1 -k2,2n > $tmpDir/$locus.up.bed");

		if(-s "$tmpDir/$locus.up.bed"> $EMPTY_FILE) { 
			system("awk '{ if(\$5>$minPhyloPscore) {print;}}' $tmpDir/$locus.up.bed > $tmpDir/$locus.up.fil.bed");
			if(-s "$tmpDir/$locus.up.fil.bed" > $EMPTY_FILE) {
				if($verbose) { print "PROGRESS: Found upstream CNS.\n"; }
				system("bedtools merge -d 25 -c 5 -o mean -i $tmpDir/$locus.up.fil.bed | awk 'BEGIN{OFS=\",\"}{ if( (\$3 - \$2)>=$minCNSLength) print(\"$locus\", \$2-$upstreamLengthReference, \$3-$upstreamLengthReference, \$4,\"UP\",$coordinateTranslateStrUp); }' $flagORFCommand > $tmpDir/$locus.cns.csv");			
				
			}
			if(!$keep_tmp) {unlink("$tmpDir/$locus.up.fil.bed"); }
		}
	}
	if(-s $finalFASTADownFileName > $EMPTY_FILE) {
		system("phyloP $phyloPParameters $treeFileName $finalFASTADownFileName | wig2bed | sort -k1,1 -k2,2n > $tmpDir/$locus.down.bed");
		if(-s "$tmpDir/$locus.down.bed"> $EMPTY_FILE) { 
			system("awk '{ if(\$5>$minPhyloPscore) {print;}}' $tmpDir/$locus.down.bed > $tmpDir/$locus.down.fil.bed");
			if(-s "$tmpDir/$locus.down.fil.bed" > $EMPTY_FILE) {
				if($verbose) { print "PROGRESS: Found downstream CNS.\n"; }
				system("bedtools merge -d 25 -c 5 -o mean -i $tmpDir/$locus.down.fil.bed | awk 'BEGIN{OFS=\",\"}{ if( (\$3 - \$2)>=$minCNSLength) print(\"$locus\", \$2, \$3, \$4 ,\"DOWN\",$coordinateTranslateStrDown); }' $flagORFCommand >> $tmpDir/$locus.cns.csv");
			}
			if(!$keep_tmp) {unlink("$tmpDir/$locus.down.fil.bed"); }
		}
	}
	
	### Build CNS and convert to table
	if( (-e "$tmpDir/$locus.cns.csv")) {
		if(-s "$tmpDir/$locus.cns.csv" > $EMPTY_FILE) {	system("cp $tmpDir/$locus.cns.csv $outputCNSDir"); }
		if(!$keep_tmp) {unlink("$tmpDir/$locus.cns.csv");}
	}

	### Now convert coordinates and dump a BEDGRAPH file for merging

	if(-e "$tmpDir/$locus.up.bed") {
		system("$coordinateTranslateAwkUp $tmpDir/$locus.up.bed > $tmpDir/$locus.phylop.bed");
	}
	if(-e "$tmpDir/$locus.down.bed") {
		system("$coordinateTranslateAwkDown $tmpDir/$locus.down.bed >> $tmpDir/$locus.phylop.bed");
	}

	if(!$keep_tmp) { unlink("$tmpDir/$locus.up.bed"); }
	if(!$keep_tmp) { unlink("$tmpDir/$locus.down.bed"); }

	if( (-e "$tmpDir/$locus.phylop.bed") && ( (-s "$tmpDir/$locus.phylop.bed") > $EMPTY_FILE) ) {
		system("cp $tmpDir/$locus.phylop.bed $outputCNSDir");
	}
	unlink("$tmpDir/$locus.phylop.bed");
} else { print "WARNING: Skipping phyloP analysis...\n"; }

if($verbose) { print "PROGRESS: End conservation analysis for $locus (" .localtime() . ").\n"; }
#### Go back to the original directory, and we are done!
chdir $curDir;	

################################################################################
###### utility functions #######################################################
sub mean {
    return sum(@_)/@_;
}

sub extractFastaToFile {
	(my $fastaFile, my $locus, my $outputFastaFile) = @_;
	my $linearise = "perl -e ' { while (<>) { if(!/^>/) {chomp;} print; } print(\"\n\"); }'";
	my $maskdinucrep = " sed -r 's/(AG|CT|CC|GG){6}/XXXXXXXXXXXX/g'";
	my $maskseq = " sed -r 's/[A|T]{10}/XXXXXXXXXX/g' | sed 's/NNN/XXX/g'";
	system("samtools faidx $fastaFile $locus | $linearise | $maskdinucrep | $maskseq  >$outputFastaFile");
}

sub getMAFQuality {
	my ($MAFFileName) = @_;

	open (my $m, $MAFFileName);
	my $maf = Bio::AlignIO->new(-fh => $m, -format => 'maf');
	my $quality =0;
	while(my $aln = $maf->next_aln()) {
		$quality = $quality + $aln->score;
	}
	close($m);
	return $quality;
}

# convert gene name to species name in input MAF line
sub geneToSpecies {
	(my $family,my  $geneName) = @_;
	my $gene2sp;
	open(my $genomeDatabase, "<" , $genomedbFile);
	my $header= <$genomeDatabase>;
	while(<$genomeDatabase>) {
		chomp;
		my @array = split /,/;
		my $speciesName= $array[1];
		my $geneToSpecies= "^" . $array[8] . "[a-zA-Z0-9\._\-]*";
		$gene2sp = $geneName;
		if($array[8] ne "" && $array[2] eq $family) {
			eval '$gene2sp =~ s/$geneToSpecies/$speciesName/g';
			if($gene2sp ne $geneName){
				return $gene2sp;
			}
		}
	}
	close($genomeDatabase);
}

################### Load MAF file and return a FASTA array in reference coordinates
sub MAFtoFASTA {
	(my $family, my $mafFileName, my $seqLength, my $targetSeqLength, my $inFASTARef,my $inMapRef, my $dir) = @_;

	my $refseqname;
	my $refstart = -1;
	my $reflen;
	my @inMap = @$inMapRef;
	my @insertions;

	my $maffile = Bio::AlignIO->new(-file => $mafFileName,
					-format => "maf") || die ("");

	while(my $aln = $maffile->next_aln) {
	   foreach my $alignseq ($aln->each_seq() ) {
	   	   my $species = geneToSpecies($family, $alignseq->id());
#		   $species = $alignseq->id();
	   	   my $newspseq = $alignseq->seq();
	   	   
		   if(not defined $inFASTARef->{$species}) {
		       $inFASTARef->{$species} = "N" x $seqLength;
		   }
		   if($refseqname eq "") {
			 $refseqname = $species;
		   }

		   if($species eq $refseqname) {
	   		 # Identify all insertions from the sequence to keep the seq in reference coordinates		 
		   	 @insertions = findAll($newspseq, "-");
		   }

   		   #now remove the insertions
   		   foreach ( @insertions ) {
   		   	   substr($newspseq, $_,1) = "Z";
   		   }
   		   
		   ### Replace all gaps with N because phyloP doesn't handle gap correctly.
			
		   $newspseq =~ s/Z//g;
		   $newspseq =~ s/-/N/g;
		   
		   if($refstart == -1) {
			$refstart = $alignseq->start()-1;
			$reflen = length($newspseq);
		   } else {
			#### Log the alignment
			my $refRelative, my $targetRelative;
			if($dir eq "U") {
				$refRelative = $refstart - $seqLength;
				$targetRelative = $alignseq->start() -1 -$targetSeqLength;
			} else {
				$refRelative = $refstart;
				$targetRelative = $alignseq->start() - 1;
			}
			push @$inMapRef, "$refRelative\t$reflen\t$species\t" . $alignseq->id() . "\t$targetRelative\n";
  		   }


		   # Check if we are overriding sequences
		   my $curspseq = substr($inFASTARef->{$species}, $refstart, $reflen);
		   if( $curspseq eq  "N" x length($curspseq)) {
			   my $tmpseq = $inFASTARef->{$species};
		   	   substr($tmpseq, $refstart, $reflen) = $newspseq;
			   $inFASTARef->{$species} = $tmpseq;
		   } else {
			# if there was something there, merge the sequences
			if(substr($inFASTARef->{$species}, $refstart, $reflen) ne $newspseq) {
					
				my $curseq = substr($inFASTARef->{$species}, $refstart, $reflen);
				my $refseq = substr($inFASTARef->{$refseqname}, $refstart, $reflen);
				my $conseq;
				for my $curchr (0 .. $reflen) {
					my $selectedMergedNuc;
					# if one is a gap, pick the nucleotide
					if(substr($curseq, $curchr,1) eq "N") {
						$selectedMergedNuc = substr($newspseq,$curchr,1);
					} elsif (substr($newspseq, $curchr,1) eq "N") {
						$selectedMergedNuc = substr($curseq,$curchr,1);
					} else { #if we have a conflict - pick the one that is similar to the reference
						if((substr($curseq,$curchr,1) eq substr($refseq,$curchr,1)) || (substr($curseq,$curchr,1) eq substr($refseq,$curchr,1))) {
							$selectedMergedNuc = substr($refseq,$curchr,1);
						} else {
							$selectedMergedNuc = substr($curseq,$curchr,1); # or if not, the default is the first one.
						}
					}
					$conseq .= $selectedMergedNuc;
				}
				my $tmpseq = $inFASTARef->{$species};
				substr($tmpseq, $refstart, $reflen) = $conseq;
			   	$inFASTARef->{$species} = $tmpseq;
			}
		}
	   }
	   $refstart = -1;
	}
}

sub findAll {
	my ($seq, $substring) = @_;
	my @occurences;
	my $offset=0;
	
	my $result = index($seq, $substring, $offset);
	while( $result != -1) {
		push (@occurences, $result);
		$offset = $result +1;
		$result = index($seq, $substring, $offset);
	}
	return @occurences;
}
